#!/usr/bin/env python3
"""
Demo Service Manager - Test th·ª±c t·∫ø c√°c h√†m
Ch·∫°y: python demo_service_manager.py
"""

import os
import sys
import time
from datetime import datetime

# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path
PARENT_DIR = os.path.dirname(os.path.abspath(__file__))
if PARENT_DIR not in sys.path:
    sys.path.insert(0, PARENT_DIR)

def demo_import_all_functions():
    """Demo import t·∫•t c·∫£ h√†m t·ª´ Service Manager"""
    print("üß™ Demo Import T·∫•t C·∫£ H√†m...")
    try:
        from app.services.service_manager import (
            # FTTH Service
            get_data_ftth, lookup_ftth,
            
            # EVN Service  
            get_data_evn, debt_electric,
            
            # Topup Multi Service
            get_data_multi_network, payment_phone_multi,
            
            # Topup Viettel Service
            get_data_viettel, payment_phone_viettel,
            
            # TV-Internet Service
            get_data_tv_internet, payment_internet,
            
            # Postpaid Service
            get_data_postpaid, payment_phone_postpaid,
            
            # Selenium Control Functions
            navigate_to_page, wait_for_element, click_element, fill_input
        )
        
        print("   ‚úÖ Import th√†nh c√¥ng t·∫•t c·∫£ 16 h√†m")
        
        # T·∫°o danh s√°ch t·∫•t c·∫£ h√†m
        all_functions = {
            "FTTH": [get_data_ftth, lookup_ftth],
            "EVN": [get_data_evn, debt_electric],
            "Topup Multi": [get_data_multi_network, payment_phone_multi],
            "Topup Viettel": [get_data_viettel, payment_phone_viettel],
            "TV-Internet": [get_data_tv_internet, payment_internet],
            "Postpaid": [get_data_postpaid, payment_phone_postpaid],
            "Selenium": [navigate_to_page, wait_for_element, click_element, fill_input]
        }
        
        print("   üìä Danh s√°ch h√†m theo service:")
        for service_name, functions in all_functions.items():
            print(f"      ‚Ä¢ {service_name}: {len(functions)} h√†m")
            for func in functions:
                print(f"        - {func.__name__}")
        
        return all_functions
        
    except Exception as e:
        print(f"   ‚ùå Import th·∫•t b·∫°i: {e}")
        return None

def demo_function_info():
    """Demo th√¥ng tin chi ti·∫øt c√°c h√†m"""
    print("\nüß™ Demo Th√¥ng Tin H√†m...")
    
    try:
        from app.services.service_manager import (
            get_data_ftth, lookup_ftth,
            get_data_evn, debt_electric,
            get_data_multi_network, payment_phone_multi,
            get_data_viettel, payment_phone_viettel,
            get_data_tv_internet, payment_internet,
            get_data_postpaid, payment_phone_postpaid,
            navigate_to_page, wait_for_element, click_element, fill_input
        )
        
        # Test m·ªôt s·ªë h√†m c·ª• th·ªÉ
        test_functions = [
            ("get_data_ftth", get_data_ftth, "FTTH Get Data"),
            ("lookup_ftth", lookup_ftth, "FTTH Action"),
            ("navigate_to_page", navigate_to_page, "Selenium Control"),
            ("wait_for_element", wait_for_element, "Selenium Control"),
        ]
        
        for name, func, description in test_functions:
            print(f"   üîç {description} - {name}:")
            print(f"      ‚Ä¢ Function name: {func.__name__}")
            print(f"      ‚Ä¢ Module: {func.__module__}")
            print(f"      ‚Ä¢ Docstring: {func.__doc__.strip()[:50]}...")
            print(f"      ‚Ä¢ Callable: {callable(func)}")
            print()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Demo function info th·∫•t b·∫°i: {e}")
        return False

def demo_service_manager_usage():
    """Demo c√°ch s·ª≠ d·ª•ng Service Manager"""
    print("\nüß™ Demo C√°ch S·ª≠ D·ª•ng Service Manager...")
    
    try:
        print("   üìù Code m·∫´u ƒë·ªÉ s·ª≠ d·ª•ng:")
        print("   " + "="*50)
        
        print("   # 1. Import t·∫•t c·∫£ h√†m")
        print("   from app.services.service_manager import (")
        print("       # FTTH Service")
        print("       get_data_ftth, lookup_ftth,")
        print("       # EVN Service")
        print("       get_data_evn, debt_electric,")
        print("       # Topup Multi Service")
        print("       get_data_multi_network, payment_phone_multi,")
        print("       # Topup Viettel Service")
        print("       get_data_viettel, payment_phone_viettel,")
        print("       # TV-Internet Service")
        print("       get_data_tv_internet, payment_internet,")
        print("       # Postpaid Service")
        print("       get_data_postpaid, payment_phone_postpaid,")
        print("       # Selenium Control Functions")
        print("       navigate_to_page, wait_for_element, click_element, fill_input")
        print("   )")
        print()
        
        print("   # 2. S·ª≠ d·ª•ng trong UI")
        print("   # Button Get d·ªØ li·ªáu")
        print("   tkbtn_get_data = ttk.Button(btn_frm, text=\"Get d·ªØ li·ªáu\",")
        print("                              command=lambda: get_data_ftth(tkinp_ctm, None))")
        print()
        print("   # Button B·∫Øt ƒë·∫ßu")
        print("   tkbtn_payment = ttk.Button(btn_frm, text=\"B·∫Øt ƒë·∫ßu\",")
        print("                              command=lambda: lookup_ftth(tkinp_ctm, tkinp_ctmed, None))")
        print()
        
        print("   # 3. S·ª≠ d·ª•ng Selenium chung")
        print("   # ƒêi·ªÅu h∆∞·ªõng")
        print("   navigate_to_page(\"FTTH\", \"https://example.com/ftth\")")
        print()
        print("   # Ch·ªù element")
        print("   element = wait_for_element(\"input_id\", 10)")
        print()
        print("   # Click element")
        print("   click_element(\"button_id\", 5)")
        print()
        print("   # ƒêi·ªÅn input")
        print("   fill_input(\"input_id\", \"value\", 5)")
        
        print("   " + "="*50)
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Demo usage th·∫•t b·∫°i: {e}")
        return False

def demo_selenium_functions():
    """Demo c√°c h√†m Selenium (kh√¥ng th·ª±c thi th·∫≠t)"""
    print("\nüß™ Demo Selenium Functions (Mock)...")
    
    try:
        from app.services.service_manager import (
            navigate_to_page, wait_for_element, click_element, fill_input
        )
        
        print("   üîß C√°c h√†m Selenium c√≥ s·∫µn:")
        selenium_functions = [
            ("navigate_to_page", "ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang service"),
            ("wait_for_element", "Ch·ªù element xu·∫•t hi·ªán"),
            ("click_element", "Click v√†o element"),
            ("fill_input", "ƒêi·ªÅn gi√° tr·ªã v√†o input")
        ]
        
        for func_name, description in selenium_functions:
            print(f"      ‚úÖ {func_name}: {description}")
        
        print("\n   üìù C√°ch s·ª≠ d·ª•ng:")
        print("      ‚Ä¢ navigate_to_page(service_name, target_url)")
        print("      ‚Ä¢ wait_for_element(element_id, timeout)")
        print("      ‚Ä¢ click_element(element_id, timeout)")
        print("      ‚Ä¢ fill_input(element_id, value, timeout)")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Demo selenium functions th·∫•t b·∫°i: {e}")
        return False

def main():
    """H√†m ch√≠nh"""
    print("üöÄ Demo Service Manager M·ªõi...")
    print(f"üìÖ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    demos = [
        ("Import All Functions", demo_import_all_functions),
        ("Function Info", demo_function_info),
        ("Service Manager Usage", demo_service_manager_usage),
        ("Selenium Functions", demo_selenium_functions),
    ]
    
    passed = 0
    total = len(demos)
    
    for demo_name, demo_func in demos:
        print(f"\nüîç {demo_name}...")
        if demo_func():
            passed += 1
            print(f"   ‚úÖ {demo_name} - TH√ÄNH C√îNG")
        else:
            print(f"   ‚ùå {demo_name} - TH·∫§T B·∫†I")
    
    print("\n" + "=" * 60)
    print(f"üìä K·∫æT QU·∫¢ DEMO: {passed}/{total} th√†nh c√¥ng")
    
    if passed == total:
        print("üéâ T·∫§T C·∫¢ DEMO TH√ÄNH C√îNG!")
        print("‚úÖ Service Manager ho·∫°t ƒë·ªông ho√†n h·∫£o")
        print("\nüí° B∆∞·ªõc ti·∫øp theo:")
        print("   1. C·∫≠p nh·∫≠t cron manager ƒë·ªÉ s·ª≠ d·ª•ng Service Manager")
        print("   2. C·∫≠p nh·∫≠t UI ƒë·ªÉ s·ª≠ d·ª•ng Service Manager")
        print("   3. Test th·ª±c t·∫ø v·ªõi browser")
    else:
        print("‚ö†Ô∏è  M·ªòT S·ªê DEMO TH·∫§T B·∫†I!")
        print("üîß C·∫ßn ki·ªÉm tra v√† s·ª≠a l·ªói")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
