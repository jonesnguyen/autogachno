#!/usr/bin/env python3
"""
Watchdog runner v·ªõi auto-reload n√¢ng cao
C·∫ßn c√†i: pip install watchdog
Ch·∫°y: python watchdog_run.py
"""

import os
import sys
import time
import subprocess
import signal
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class CodeChangeHandler(FileSystemEventHandler):
    """X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi file"""
    
    def __init__(self, main_file, callback):
        self.main_file = main_file
        self.callback = callback
        self.last_modified = 0
        
    def on_modified(self, event):
        if event.is_directory:
            return
            
        # Ch·ªâ x·ª≠ l√Ω file Python
        if not event.src_path.endswith('.py'):
            return
            
        # Tr√°nh spam khi c√≥ nhi·ªÅu thay ƒë·ªïi li√™n ti·∫øp
        current_time = time.time()
        if current_time - self.last_modified < 1:
            return
            
        self.last_modified = current_time
        print(f"\nüîÑ [WATCHDOG] Ph√°t hi·ªán thay ƒë·ªïi: {event.src_path}")
        self.callback()

def run_with_watchdog():
    """Ch·∫°y ·ª©ng d·ª•ng v·ªõi watchdog auto-reload"""
    print("üöÄ [WATCHDOG] Kh·ªüi ƒë·ªông ch·∫ø ƒë·ªô ph√°t tri·ªÉn v·ªõi auto-reload...")
    print("   üìÅ Theo d√µi thay ƒë·ªïi trong th∆∞ m·ª•c: app/")
    print("   üîÑ T·ª± ƒë·ªông restart khi c√≥ thay ƒë·ªïi file .py")
    print("   ‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
    print()
    
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn main.py
    main_file = Path("app/main.py")
    
    if not main_file.exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y {main_file}")
        return
    
    process = None
    
    def restart_app():
        nonlocal process
        # D·ª´ng process c≈© n·∫øu c√≥
        if process:
            print("   üõë D·ª´ng process c≈©...")
            try:
                process.terminate()
                process.wait(timeout=5)
                print("   ‚úÖ Process c≈© ƒë√£ d·ª´ng")
            except subprocess.TimeoutExpired:
                process.kill()
                print("   ‚ö†Ô∏è  Process c≈© b·ªã force kill")
        
        # Kh·ªüi ƒë·ªông process m·ªõi
        print("   üöÄ Kh·ªüi ƒë·ªông process m·ªõi...")
        process = subprocess.Popen([
            sys.executable, str(main_file)
        ], cwd=os.getcwd())
        
        print(f"   ‚úÖ Process m·ªõi ƒë√£ kh·ªüi ƒë·ªông (PID: {process.pid})")
        print("   üìù S·∫µn s√†ng nh·∫≠n thay ƒë·ªïi...")
    
    # Kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu
    restart_app()
    
    # Thi·∫øt l·∫≠p watchdog observer
    event_handler = CodeChangeHandler(main_file, restart_app)
    observer = Observer()
    observer.schedule(event_handler, 'app', recursive=True)
    observer.start()
    
    try:
        print("   üëÄ ƒêang theo d√µi thay ƒë·ªïi...")
        while True:
            time.sleep(1)
            
            # Ki·ªÉm tra process c√≥ c√≤n ch·∫°y kh√¥ng
            if process and process.poll() is not None:
                print(f"   ‚ö†Ô∏è  Process ƒë√£ d·ª´ng (exit code: {process.returncode})")
                process = None
                # T·ª± ƒë·ªông restart n·∫øu process b·ªã crash
                print("   üîÑ T·ª± ƒë·ªông restart do process crash...")
                restart_app()
                
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  [WATCHDOG] Nh·∫≠n t√≠n hi·ªáu d·ª´ng...")
        observer.stop()
        
        if process:
            print(f"   üõë D·ª´ng process (PID: {process.pid})...")
            try:
                process.terminate()
                process.wait(timeout=5)
                print("   ‚úÖ Process ƒë√£ d·ª´ng an to√†n")
            except subprocess.TimeoutExpired:
                process.kill()
                print("   ‚ö†Ô∏è  Process b·ªã force kill")
        
        observer.join()
        print("   üëã T·∫°m bi·ªát!")

if __name__ == "__main__":
    try:
        run_with_watchdog()
    except ImportError:
        print("‚ùå C·∫ßn c√†i ƒë·∫∑t watchdog: pip install watchdog")
        print("   Ho·∫∑c s·ª≠ d·ª•ng: python dev_run.py")
