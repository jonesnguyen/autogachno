import os
import re
import time
import json 
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill
import pytz
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import StaleElementReferenceException, NoSuchElementException, TimeoutException
from cryptography.fernet import Fernet
import psycopg2

from bs4 import BeautifulSoup
import sys
import logging
import requests
import threading
from typing import List, Tuple, Optional, Dict, Any
from dataclasses import dataclass

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class Config:
    """C·∫•u h√¨nh ·ª©ng d·ª•ng"""
    DRIVER_LINK: str = "https://kpp.bankplus.vn"
    FOLDER_RESULT: str = "ket_qua"
    TITLE: str = "Th√¥ng b√°o"
    CONFIG_FILE: str = "config.json"
    ICON_FILE: str = "viettelpay.ico"
    COPYRIGHT_KEY: bytes = b"h_ThisAAutoToolVjppro-CopyRight-ByCAOAC7690="
    STATUS_COMPLETE: str = "ƒê√£ x·ª≠ l√Ω"
    STATUS_INCOMPLETE: str = "Ch∆∞a x·ª≠ l√Ω"
    
    # Service types
    SERVICES = {
        'payment_internet': 'payment_internet',
        'payment_card': 'deb_cart', 
        'lookup_card': 'lookup_cart',
        'lookup_ftth': 'lookup_ftth',
        'payment_evn': 'deb_evn'
    }
    
    # API Configuration
    API_BASE_URL: str = os.getenv('API_BASE_URL', "http://127.0.0.1:8080")
    NODE_SERVER_URL: str = os.getenv('NODE_SERVER_URL', "http://127.0.0.1:5000")
    API_TIMEOUT: int = 10

# Global variables
stop_flag = False
driver = None
dbfiles = None
times_exits = {}
api_server_thread = None
automation_lock = threading.Lock()
AUTOMATION_MAX_RETRIES = 1  # M·∫∑c ƒë·ªãnh ch·ªâ th·ª≠ 1 l·∫ßn cho m·ªói m√£
DIRECT_DB_MODE = True  # Ch·ªâ x·ª≠ l√Ω tr·ª±c ti·∫øp v·ªõi database, kh√¥ng ph·ª• thu·ªôc Node API
DB_DATABASE_URL = os.getenv('DATABASE_URL', 'postgres://postgres:123456@localhost:5432/autogachno')
DB_MAIN_USER_ID = os.getenv('MAIN_USER_ID', 'admin-local')
DB_MAIN_USER_EMAIL = os.getenv('MAIN_USER_EMAIL', 'Demodiemthu')

# ƒêƒÉng nh·∫≠p t·ª± ƒë·ªông khi m·ªü tr√¨nh duy·ªát
LOGIN_USERNAME = os.getenv('APP_LOGIN_USERNAME', '1000460100_VTP_00073_DB')
LOGIN_PASSWORD = os.getenv('APP_LOGIN_PASSWORD', '686886')

def db_ensure_user(user_id: str, email: str) -> None:
    try:
        with psycopg2.connect(DB_DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT 1 FROM users WHERE id = %s", (user_id,))
                exists = cur.fetchone()
                if exists:
                    return
                cur.execute(
                    """
                    INSERT INTO users (id, email, first_name, last_name, role, status)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    """,
                    (user_id, email, 'Admin', 'Local', 'admin', 'active')
                )
                print(f"[DB] T·∫°o user m·∫∑c ƒë·ªãnh {email} ({user_id})")
    except Exception as e:
        print(f"[DB] L·ªói ƒë·∫£m b·∫£o user t·ªìn t·∫°i: {e}")


def send_callback_with_retry(order_id: str, code: str, status: str, amount: Any, notes: str, details: Optional[Dict[str, Any]] = None) -> bool:
    """G·ª≠i callback v·ªõi retry logic t·ªëi ƒëa 3 l·∫ßn."""
    print(f"üîÑ [CALLBACK] B·∫Øt ƒë·∫ßu g·ª≠i callback cho m√£ {code} - Order: {order_id}")
    print(f"   üìä Status: {status}, Amount: {amount}, Notes: {notes}")
    
    for attempt in range(3):
        try:
            payload = {
                "orderId": order_id,
                "code": code,
                "status": status,
                "amount": str(amount) if isinstance(amount, (int, float)) else None,
                "notes": notes,
            }
            
            if details:
                payload["data"] = {
                    "type": "ftth_details",
                    "details": details,
                }
                print(f"   üìã Data: {details}")
            
            print(f"   üì§ L·∫ßn th·ª≠ {attempt + 1}/3: G·ª≠i ƒë·∫øn {Config.NODE_SERVER_URL}/api/automation/callback")
            response = requests.post(
                f"{Config.NODE_SERVER_URL}/api/automation/callback",
                json=payload,
                timeout=10,  # TƒÉng timeout
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ Callback th√†nh c√¥ng cho {code} (l·∫ßn {attempt + 1})")
                logger.info(f"Callback th√†nh c√¥ng cho {code} (l·∫ßn {attempt + 1})")
                return True
            else:
                print(f"   ‚ùå Callback th·∫•t b·∫°i cho {code} (l·∫ßn {attempt + 1}): HTTP {response.status_code}")
                logger.warning(f"Callback th·∫•t b·∫°i cho {code} (l·∫ßn {attempt + 1}): {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Callback l·ªói cho {code} (l·∫ßn {attempt + 1}): {e}")
            logger.warning(f"Callback l·ªói cho {code} (l·∫ßn {attempt + 1}): {e}")
        
        if attempt < 2:  # C√≤n c∆° h·ªôi retry
            print(f"   ‚è≥ Ch·ªù 2s tr∆∞·ªõc khi retry...")
            time.sleep(2)  # Delay gi·ªØa c√°c l·∫ßn retry
    
    print(f"   üí• Callback th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠ cho {code}")
    logger.error(f"Callback th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠ cho {code}")
    return False

def update_database_immediately(order_id: str, code: str, status: str, amount: Any, notes: str, details: Optional[Dict[str, Any]] = None) -> bool:
    """Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong."""
    print(f"üíæ [DATABASE] C·∫≠p nh·∫≠t database cho m√£ {code} - Order: {order_id}")
    print(f"   üìä Status: {status}, Amount: {amount}")
    print(f"   üìù Notes: {notes}")
    
    if details:
        print(f"   üìã Chi ti·∫øt FTTH:")
        for key, value in details.items():
            print(f"      ‚Ä¢ {key}: {value}")
    
    # C·∫≠p nh·∫≠t tr·ª±c ti·∫øp DB theo y√™u c·∫ßu
    try:
        with psycopg2.connect(os.getenv('DATABASE_URL', 'postgres://postgres:123456@localhost:5432/autogachno')) as conn:
            with conn.cursor() as cur:
                import json as pyjson
                result_obj = {
                    'code': code,
                    'status': 'completed' if status == 'success' else status,
                    'amount': str(amount) if amount is not None else None,
                    'notes': notes,
                    'details': details or None,
                }
                result_json = pyjson.dumps(result_obj, ensure_ascii=False)
                # Log ƒëi·ªÅu ki·ªán WHERE d·ªÖ ƒë·ªçc
                cur.execute("SELECT input_data, service_type, user_id FROM orders WHERE id = %s", (order_id,))
                row = cur.fetchone()
                if row:
                    input_data, service_type, user_id = row
                    print("   üîé WHERE v√≠ d·ª•:")
                    print(f"      WHERE input_data = '{(input_data or '').strip()}'")
                    print(f"        AND service_type = '{service_type}'")
                    print(f"        AND user_id = '{user_id}'")
                    print(f"        AND status IN ('pending','processing')")
                # Update theo id
                # C·∫≠p nh·∫≠t orders (kh√¥ng r√†ng bu·ªôc status ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n ghi nh·∫≠n k·∫øt qu·∫£)
                cur.execute(
                    """
                    UPDATE orders
                    SET status = %s,
                        result_data = %s,
                        updated_at = NOW()
                    WHERE id = %s
                    RETURNING id
                    """,
                    ('completed' if status == 'success' else status, result_json, order_id)
                )
                ok_order = cur.fetchone()
                if ok_order:
                    print(f"   ‚úÖ Updated order {order_id}")
                else:
                    print("   ‚ö†Ô∏è Kh√¥ng c√≥ b·∫£n ghi ph√π h·ª£p ƒë·ªÉ update (orders) ho·∫∑c ƒë√£ ·ªü tr·∫°ng th√°i cu·ªëi c√πng")

                # C·∫≠p nh·∫≠t service_transactions cho ƒë√∫ng code (∆∞u ti√™n theo order_id + code)
                cur.execute(
                    """
                    UPDATE service_transactions
                    SET status = %s,
                        amount = COALESCE(%s, amount),
                        notes = %s,
                        processing_data = %s,
                        updated_at = NOW()
                    WHERE order_id = %s
                      AND code = %s
                      AND status IN ('pending','processing')
                    RETURNING id
                    """,
                    (
                        'success' if status == 'success' else 'failed',
                        str(amount) if isinstance(amount, (int, float)) else None,
                        notes,
                        result_json,
                        order_id,
                        code,
                    )
                )
                ok_tran = cur.fetchone()
                if ok_tran:
                    print(f"   ‚úÖ Updated transaction for code {code}")
                else:
                    print("   ‚ö†Ô∏è Kh√¥ng c√≥ transaction ph√π h·ª£p ƒë·ªÉ update (order_id+code). Th·ª≠ c·∫≠p nh·∫≠t transaction m·ªõi nh·∫•t theo code...")
                    # Fallback: c·∫≠p nh·∫≠t transaction m·ªõi nh·∫•t theo code v√† service_type
                    cur.execute(
                        """
                        SELECT st.id
                        FROM service_transactions st
                        JOIN orders o ON o.id = st.order_id
                        WHERE st.code = %s
                          AND o.service_type = %s
                          AND st.status IN ('pending','processing')
                        ORDER BY st.created_at DESC
                        LIMIT 1
                        """,
                        (code, service_type)
                    )
                    st_row = cur.fetchone()
                    if st_row:
                        st_id = st_row[0]
                        cur.execute(
                            """
                            UPDATE service_transactions
                            SET status = %s,
                                amount = COALESCE(%s, amount),
                                notes = %s,
                                processing_data = %s,
                                updated_at = NOW()
                            WHERE id = %s
                            RETURNING id
                            """,
                            (
                                'success' if status == 'success' else 'failed',
                                str(amount) if isinstance(amount, (int, float)) else None,
                                notes,
                                result_json,
                                st_id,
                            )
                        )
                        ok_tran2 = cur.fetchone()
                        if ok_tran2:
                            print(f"   ‚úÖ Updated latest transaction for code {code} (fallback)")
                            ok_tran = ok_tran2
                        else:
                            print("   ‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t transaction (fallback)")
                    else:
                        print("   ‚ÑπÔ∏è Kh√¥ng c√≤n transaction pending/processing n√†o cho code n√†y (fallback)")

                # D·ªçn tr√πng: ƒë√≥ng c√°c transaction kh√°c c√πng code c√≤n pending/processing (n·∫øu c√≥)
                try:
                    cur.execute(
                        """
                        UPDATE service_transactions st
                        SET status = 'failed',
                            notes = CASE WHEN st.notes IS NULL OR st.notes = '' THEN %s ELSE st.notes || ' | ' || %s END,
                            updated_at = NOW()
                        FROM orders o
                        WHERE st.order_id = o.id
                          AND st.code = %s
                          AND st.order_id <> %s
                          AND o.service_type = %s
                          AND st.status IN ('pending','processing')
                        RETURNING st.id
                        """,
                        ("auto-closed dup", "auto-closed dup", code, order_id, service_type)
                    )
                    closed_dups = cur.fetchall()
                    if closed_dups:
                        print(f"   ‚úÖ ƒê√£ ƒë√≥ng {len(closed_dups)} transaction tr√πng (pending/processing) cho {code}")
                except Exception as _e:
                    print(f"   ‚ö†Ô∏è L·ªói khi ƒë√≥ng transaction tr√πng: {_e}")

                # Ki·ªÉm tra l·∫°i c√≤n transaction pending/processing cho m√£ n√†y kh√¥ng
                try:
                    pendings_after = db_check_pending_orders_for_code(service_type, code, None)
                    if pendings_after:
                        print(f"   üîé C√≤n pending/processing sau update cho {code}: {', '.join(pendings_after)}")
                    else:
                        print(f"   ‚úÖ Kh√¥ng c√≤n pending/processing cho {code} sau update")
                except Exception:
                    pass

                return bool(ok_order or ok_tran)
    except Exception as e:
        print(f"   ‚ùå L·ªói c·∫≠p nh·∫≠t DB tr·ª±c ti·∫øp: {e}")
        return False
    
def db_find_order_id(service_type: str, code: str, user_id: Optional[str] = None) -> Optional[str]:
    """T√¨m order_id theo code t·ª´ b·∫£ng service_transactions ƒëang pending/processing (∆∞u ti√™n), kh·ªõp service_type c·ªßa orders."""
    try:
        with psycopg2.connect(DB_DATABASE_URL) as conn:
            with conn.cursor() as cur:
                if user_id:
                    cur.execute(
                        """
                        SELECT st.order_id
                        FROM service_transactions st
                        JOIN orders o ON o.id = st.order_id
                        WHERE st.code = %s
                          AND o.service_type = %s
                          AND o.user_id = %s
                          AND st.status IN ('pending','processing')
                        ORDER BY st.created_at DESC
                        LIMIT 1
                        """,
                        (code, service_type, user_id)
                    )
                else:
                    cur.execute(
                        """
                        SELECT st.order_id
                        FROM service_transactions st
                        JOIN orders o ON o.id = st.order_id
                        WHERE st.code = %s
                          AND o.service_type = %s
                          AND st.status IN ('pending','processing')
                        ORDER BY st.created_at DESC
                        LIMIT 1
                        """,
                        (code, service_type)
                    )
                row = cur.fetchone()
                return row[0] if row else None
    except Exception as e:
        print(f"[DB] L·ªói t√¨m orderId cho code='{code}': {e}")
        return None

def db_check_pending_orders_for_code(service_type: str, code: str, user_id: Optional[str] = None) -> List[str]:
    """Tr·∫£ v·ªÅ danh s√°ch order_id c√≤n 'pending'/'processing' cho m√£ (code) v√† service_type."""
    try:
        with psycopg2.connect(DB_DATABASE_URL) as conn:
            with conn.cursor() as cur:
                if user_id:
                    cur.execute(
                        """
                        SELECT st.order_id
                        FROM service_transactions st
                        JOIN orders o ON o.id = st.order_id
                        WHERE st.code = %s
                          AND o.service_type = %s
                          AND o.user_id = %s
                          AND st.status IN ('pending','processing')
                        ORDER BY st.created_at DESC
                        """,
                        (code, service_type, user_id)
                    )
                else:
                    cur.execute(
                        """
                        SELECT st.order_id
                        FROM service_transactions st
                        JOIN orders o ON o.id = st.order_id
                        WHERE st.code = %s
                          AND o.service_type = %s
                          AND st.status IN ('pending','processing')
                        ORDER BY st.created_at DESC
                        """,
                        (code, service_type)
                    )
                rows = cur.fetchall()
                return [r[0] for r in rows]
    except Exception as e:
        print(f"[DB] L·ªói ki·ªÉm tra pending cho code='{code}': {e}")
        return []

def send_callback_with_retry(order_id: str, code: str, status: str, amount: Any, notes: str, details: Optional[Dict[str, Any]] = None) -> bool:
    """G·ª≠i callback v·ªõi retry logic t·ªëi ƒëa 3 l·∫ßn."""
    print(f"üîÑ [CALLBACK] B·∫Øt ƒë·∫ßu g·ª≠i callback cho m√£ {code} - Order: {order_id}")
    print(f"   üìä Status: {status}, Amount: {amount}, Notes: {notes}")
    
    for attempt in range(3):
        try:
            payload = {
                "orderId": order_id,
                "code": code,
                "status": status,
                "amount": str(amount) if isinstance(amount, (int, float)) else None,
                "notes": notes,
            }
            
            if details:
                payload["data"] = {
                    "type": "ftth_details",
                    "details": details,
                }
                print(f"   üìã Data: {details}")
            
            print(f"   üì§ L·∫ßn th·ª≠ {attempt + 1}/3: G·ª≠i ƒë·∫øn {Config.NODE_SERVER_URL}/api/automation/callback")
            response = requests.post(
                f"{Config.NODE_SERVER_URL}/api/automation/callback",
                json=payload,
                timeout=10,
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ Callback th√†nh c√¥ng cho {code} (l·∫ßn {attempt + 1})")
                logger.info(f"Callback th√†nh c√¥ng cho {code} (l·∫ßn {attempt + 1})")
                return True
            else:
                print(f"   ‚ùå Callback th·∫•t b·∫°i cho {code} (l·∫ßn {attempt + 1}): HTTP {response.status_code}")
                logger.warning(f"Callback th·∫•t b·∫°i cho {code} (l·∫ßn {attempt + 1}): {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Callback l·ªói cho {code} (l·∫ßn {attempt + 1}): {e}")
            logger.warning(f"Callback l·ªói cho {code} (l·∫ßn {attempt + 1}): {e}")
        
        if attempt < 2:
            print(f"   ‚è≥ Ch·ªù 2s tr∆∞·ªõc khi retry...")
            time.sleep(2)
    
    print(f"   üí• Callback th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠ cho {code}")
    logger.error(f"Callback th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠ cho {code}")
    return False

def update_database_immediately(order_id: str, code: str, status: str, amount: Any, notes: str, details: Optional[Dict[str, Any]] = None) -> bool:
    """Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong."""
    print(f"üíæ [DATABASE] C·∫≠p nh·∫≠t database cho m√£ {code} - Order: {order_id}")
    print(f"   üìä Status: {status}, Amount: {amount}")
    print(f"   üìù Notes: {notes}")
    
    if details:
        print(f"   üìã Chi ti·∫øt FTTH:")
        for key, value in details.items():
            print(f"      ‚Ä¢ {key}: {value}")
    
    try:
        with psycopg2.connect(os.getenv('DATABASE_URL', 'postgres://postgres:123456@localhost:5432/autogachno')) as conn:
            with conn.cursor() as cur:
                import json as pyjson
                result_obj = {
                    'code': code,
                    'status': 'completed' if status == 'success' else status,
                    'amount': str(amount) if amount is not None else None,
                    'notes': notes,
                    'details': details or None,
                }
                result_json = pyjson.dumps(result_obj, ensure_ascii=False)
                cur.execute("SELECT input_data, service_type, user_id FROM orders WHERE id = %s", (order_id,))
                row = cur.fetchone()
                if row:
                    input_data, service_type, user_id = row
                    print("   üîé WHERE v√≠ d·ª•:")
                    print(f"      WHERE input_data = '{(input_data or '').strip()}'")
                    print(f"        AND service_type = '{service_type}'")
                    print(f"        AND user_id = '{user_id}'")
                    print(f"        AND status IN ('pending','processing')")
                cur.execute(
                    """
                    UPDATE orders
                    SET status = %s,
                        result_data = %s,
                        updated_at = NOW()
                    WHERE id = %s AND status IN ('pending','processing')
                    RETURNING id
                    """,
                    ('completed' if status == 'success' else status, result_json, order_id)
                )
                ok = cur.fetchone()
                if ok:
                    print(f"   ‚úÖ Updated order {order_id}")
                    return True
                print("   ‚ö†Ô∏è Kh√¥ng c√≥ b·∫£n ghi ph√π h·ª£p ƒë·ªÉ update")
                return False
    except Exception as e:
        print(f"   ‚ùå L·ªói c·∫≠p nh·∫≠t DB tr·ª±c ti·∫øp: {e}")
        return False

def db_insert_orders_from_lines(service_type: str, user_id: str, lines: List[str]) -> int:
    codes = [ln.strip() for ln in lines if ln and ln.strip()]
    if not codes:
        return 0
    try:
        with psycopg2.connect(DB_DATABASE_URL) as conn:
            with conn.cursor() as cur:
                count = 0
                for code in codes:
                    cur.execute(
                        """
                        INSERT INTO orders (user_id, service_type, status, input_data)
                        VALUES (%s, %s, 'pending', %s)
                        RETURNING id
                        """,
                        (user_id, service_type, code)
                    )
                    cur.fetchone()
                    count += 1
                print(f"[DB] ƒê√£ t·∫°o {count} orders cho service '{service_type}'.")
                return count
    except Exception as e:
        print(f"[DB] L·ªói insert orders: {e}")
        return 0

def get_exe_dir():
    exe_path = sys.argv[0]
    exe_dir = os.path.dirname(exe_path)
    return exe_dir

def start_api_server():
    """B·ªè qua mock API server: danh s√°ch ƒë∆°n l·∫•y t·ª´ Database qua Node API."""
    logger.info("B·ªè qua mock_api_server: d√πng tr·ª±c ti·∫øp Node API/DB")
    return False

def ensure_driver_and_login() -> bool:
    """ƒê·∫£m b·∫£o Chrome driver ƒë√£ s·∫µn s√†ng (b·ªè qua ƒëƒÉng nh·∫≠p)."""
    global driver
    try:
        if driver is None:
            username = LOGIN_USERNAME or "default"
            driver = initialize_browser(username)
            if not driver:
                logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh duy·ªát")
                return False
        return True
    except Exception as e:
        logger.error(f"ensure_driver_and_login error: {e}")
        return False

def process_lookup_ftth_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω tra c·ª©u FTTH kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω FTTH cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    
    print("   ‚úÖ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω (b·ªè qua ƒëƒÉng nh·∫≠p)")
    
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang FTTH...")
            navigate_to_ftth_page_and_select_radio()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang FTTH")
            
            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh cho t·ª´ng order n·∫øu c√≥
            if order_id:
                print("   üìã Danh s√°ch m√£ s·∫Ω x·ª≠ l√Ω:")
                for idx, cb in enumerate(codes, 1):
                    print(f"      {idx}. {cb}")

            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(AUTOMATION_MAX_RETRIES):  # Retry t·ªëi ƒëa c·∫•u h√¨nh
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/{AUTOMATION_MAX_RETRIES} cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_ftth_page_and_select_radio()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        root.update() if 'root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn m√£ thu√™ bao: {cbil}")
                        customer = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:contractCode")))
                        customer.clear()
                        customer.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t KI·ªÇM TRA...")
                        payment_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:btnPay0")))
                        payment_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   üìä L·∫•y th√¥ng tin k·∫øt qu·∫£...")
                        element41 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:j_idt41")))
                        _is_amount, amount, _pid = amount_by_cbil(cbil, element41, False)
                        details = extract_ftth_details_from_page()
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: Amount = {amount}")
                        if details:
                            print(f"   üìã Chi ti·∫øt FTTH:")
                            for key, value in details.items():
                                print(f"      ‚Ä¢ {key}: {value}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": amount, "status": "success"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            db_success = update_database_immediately(order_id, cbil, "success", amount, "FTTH lookup ok", details)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < (AUTOMATION_MAX_RETRIES - 1):  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"FTTH code {cbil} th·∫•t b·∫°i sau {AUTOMATION_MAX_RETRIES} l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω FTTH:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"FTTH processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_lookup_ftth_codes error: {e}")


def check_api_health():
    """Ki·ªÉm tra Node API (ngu·ªìn d·ªØ li·ªáu th·∫≠t) c√≥ ho·∫°t ƒë·ªông kh√¥ng"""
    try:
        response = requests.get(f"{Config.NODE_SERVER_URL}/api/health", timeout=5)
        return response.status_code == 200
    except Exception:
        return False

def db_fetch_service_data(service_type: str) -> Optional[Dict[str, Any]]:
    """ƒê·ªçc th·∫≥ng t·ª´ Postgres: tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u theo service_type.
    - L·∫•y t·ªëi ƒëa 20 giao d·ªãch m·ªõi nh·∫•t t·ª´ service_transactions join orders theo service_type
    - Tr·∫£ v·ªÅ code list theo ƒë·ªãnh d·∫°ng c·ªßa t·ª´ng d·ªãch v·ª• v√† k√®m order_id g·∫ßn nh·∫•t + mapping code->orderId
    """
    try:
        with psycopg2.connect(os.getenv('DATABASE_URL', 'postgres://postgres:123456@localhost:5432/autogachno')) as conn:
            with conn.cursor() as cur:
                # L·∫•y m·ªói m√£ (code) 1 d√≤ng: ch·ªçn transaction m·ªõi nh·∫•t cho t·ª´ng code
                cur.execute(
                    """
                    SELECT DISTINCT ON (st.code) st.code, st.order_id, st.created_at
                    FROM service_transactions st
                    JOIN orders o ON o.id = st.order_id
                    WHERE o.service_type = %s
                      AND st.status IN ('pending','processing')
                    ORDER BY st.code, st.created_at DESC
                    """,
                    (service_type,)
                )
                rows = cur.fetchall()
                codes = []
                code_order_map = []
                for code_val, order_val, _ in rows:
                    if not code_val:
                        continue
                    codes.append(code_val)
                    if order_val:
                        code_order_map.append({'code': code_val, 'orderId': order_val})
                # L·∫•y order_id m·ªõi nh·∫•t theo created_at
                latest_order_id = None
                if rows:
                    latest_row = max(rows, key=lambda r: r[2] or datetime.min)
                    latest_order_id = latest_row[1]

                result: Dict[str, Any] = {}
                if service_type in ("tra_cuu_ftth", "thanh_toan_tv_internet"):
                    result["subscriber_codes"] = codes[:10]
                elif service_type == "gach_dien_evn":
                    result["bill_codes"] = codes[:10]
                elif service_type in ("nap_tien_da_mang", "nap_tien_viettel", "tra_cuu_no_tra_sau"):
                    result["phone_numbers"] = codes[:10]
                else:
                    # fallback chung
                    result["codes"] = codes[:10]

                result["order_id"] = latest_order_id
                result["code_order_map"] = code_order_map
                return result
    except Exception as e:
        logger.error(f"L·ªói ƒë·ªçc DB cho {service_type}: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói k·∫øt n·ªëi DB: {e}")
        return None

def fetch_api_data(service_type: str) -> Optional[Dict]:
    """ƒê√£ chuy·ªÉn sang ƒë·ªçc tr·ª±c ti·∫øp DB (b·ªè API)."""
    return db_fetch_service_data(service_type)

def populate_text_widget(text_widget, data_list):
    """ƒê·ªï d·ªØ li·ªáu v√†o Text widget"""
    try:
        text_widget.config(state="normal")
        text_widget.delete("1.0", "end")
        if data_list:
            text_widget.insert("1.0", "\n".join(data_list))
        text_widget.config(state="normal")
    except Exception as e:
        logger.error(f"L·ªói ƒë·ªï d·ªØ li·ªáu v√†o text widget: {e}")

def populate_entry_widget(entry_widget, value):
    """ƒê·ªï d·ªØ li·ªáu v√†o Entry widget"""
    try:
        entry_widget.delete(0, "end")
        if value:
            entry_widget.insert(0, str(value))
    except Exception as e:
        logger.error(f"L·ªói ƒë·ªï d·ªØ li·ªáu v√†o entry widget: {e}")

def populate_combobox_widget(combobox_widget, value):
    """ƒê·ªï d·ªØ li·ªáu v√†o Combobox widget"""
    try:
        if value and value in combobox_widget['values']:
            combobox_widget.set(value)
    except Exception as e:
        logger.error(f"L·ªói ƒë·ªï d·ªØ li·ªáu v√†o combobox widget: {e}")

def get_data_ftth(text_widget, order_entry: Optional[ttk.Entry] = None):
    """L·∫•y d·ªØ li·ªáu API cho Tra c·ª©u FTTH v√† set Order ID n·∫øu c√≥"""
    try:
        data = fetch_api_data("tra_cuu_ftth")
        if data and "subscriber_codes" in data:
            codes = data["subscriber_codes"]
            populate_text_widget(text_widget, codes)
            order_id = data.get("order_id")
            code_map = data.get("code_order_map") or []
            info_msg = f"ƒê√£ t·∫£i {len(codes)} m√£ thu√™ bao FTTH"
            if order_id:
                print(f"[INFO] Order ID t·ª´ DB (g·∫ßn nh·∫•t): {order_id}", flush=True)
                logger.info(f"Order ID t·ª´ DB (FTTH, g·∫ßn nh·∫•t): {order_id}")
                info_msg += f"\nOrder ID (g·∫ßn nh·∫•t): {order_id}"
            # In mapping chi ti·∫øt m√£ -> orderId n·∫øu c√≥
            if code_map:
                print("[INFO] Mapping m√£ -> Order ID:", flush=True)
                for item in code_map:
                    try:
                        print(f"  {item.get('code')}: {item.get('orderId')}", flush=True)
                    except Exception:
                        pass
            #messagebox.showinfo(Config.TITLE, info_msg)
        else:
            logger.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ DB")
            #messagebox.showwarning(Config.TITLE, "Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ DB")
    except Exception as e:
        logger.error(f"L·ªói l·∫•y d·ªØ li·ªáu FTTH: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói l·∫•y d·ªØ li·ªáu FTTH: {e}")

def export_excel(data: List[Tuple[str, Any, str]], name_dir: str) -> bool:
    """Xu·∫•t d·ªØ li·ªáu ra file Excel"""
    today = datetime.now().strftime("%H%M-%d-%m-%Y")
    try:
        export_dir = os.path.join(os.getcwd(), f"{Config.FOLDER_RESULT}\\{name_dir}")
        os.makedirs(export_dir, exist_ok=True)
        
        file_name = f"{today}.xlsx"
        file_path = os.path.join(export_dir, file_name)

        wb = Workbook()
        ws = wb.active
        
        # ƒê·ªãnh d·∫°ng header
        headers = ['STT', 'S·ªë thu√™ bao', 'S·ªë ti·ªÅn', 'Ghi ch√∫']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')

        # Ghi d·ªØ li·ªáu
        for idx, (phone, amount, note) in enumerate(data, start=2):
            ws.cell(row=idx, column=1, value=idx - 1)
            ws.cell(row=idx, column=2, value=phone)
            ws.cell(row=idx, column=3, value=amount)
            ws.cell(row=idx, column=4, value=note)
            
        wb.save(file_path)
        
        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën m·ªü file kh√¥ng
        # if messagebox.askyesno(Config.TITLE, f"D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u t·∫°i: \n{Config.FOLDER_RESULT}/{name_dir}/{today}"):
        #     try:
        #         os.startfile(file_path)
        #     except Exception as e:
        #         logger.warning(f"Kh√¥ng th·ªÉ m·ªü file Excel: {e}")
                
        return True
        
    except Exception as e:
        logger.error(f"L·ªói xu·∫•t Excel: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói xu·∫•t Excel: {e}")
        return False

def valid_data(data: List[Any]) -> bool:
    """Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o"""
    try:
        if not check_username():
            return False
        for item in data:
            # N·∫øu l√† danh s√°ch (v√≠ d·ª• danh s√°ch m√£), y√™u c·∫ßu c√≥ √≠t nh·∫•t 1 ph·∫ßn t·ª≠ kh√¥ng r·ªóng
            if isinstance(item, (list, tuple)):
                has_nonempty = any((isinstance(x, str) and x.strip()) for x in item)
                if not has_nonempty:
                    #messagebox.showwarning(Config.TITLE, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
                    return False
            else:
                # X·ª≠ l√Ω chu·ªói/tham s·ªë ƒë∆°n l·∫ª
                text = str(item) if item is not None else ""
                if not text.strip():
                    #messagebox.showwarning(Config.TITLE, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
                    return False
        return True
    except Exception as e:
        logger.error(f"L·ªói ki·ªÉm tra d·ªØ li·ªáu: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói ki·ªÉm tra d·ªØ li·ªáu: {e}")
        return False

def delete_ctmed(cmted: tk.Text):
    """X√≥a n·ªôi dung text widget"""
    cmted.config(state="normal")
    cmted.delete("1.0", "end")
    cmted.config(state="disabled")

def insert_ctmed(cmted: tk.Text, cbil: str):
    """Th√™m text v√†o widget"""
    cmted.config(state="normal")
    cmted.insert("1.0", f"{cbil}\n")
    cmted.config(state="disabled")

def stop_tool():
    """D·ª´ng ch∆∞∆°ng tr√¨nh"""
    global stop_flag
    stop_flag = True
    #messagebox.showinfo(Config.TITLE, "ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")

def update_stop_flag():
    """Reset stop flag"""
    global stop_flag
    stop_flag = False

def toggle_input_amount(select, label, combobox):
    selected_value = select.get()
    if selected_value == "G·∫°ch n·ª£ tr·∫£ sau":
        combobox.pack_forget()
        label.pack_forget()
    else:
        combobox.pack(side="right")
        label.pack(side="right")
    root.update()

def handle_choose_select(choose: str) -> int:
    """X·ª≠ l√Ω l·ª±a ch·ªçn lo·∫°i thanh to√°n"""
    try:
        choose = choose.strip()
        if choose == "N·∫°p tr·∫£ tr∆∞·ªõc":
            return 1
        else:
            return 2
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω lo·∫°i thanh to√°n: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói x·ª≠ l√Ω lo·∫°i thanh to√°n: {e}")
        return 1

def get_chrome_driver(username: str = "default") -> Optional[webdriver.Chrome]:
    """T·∫°o Chrome driver"""
    try:
        profile_dir = os.path.join(os.getcwd(), "chrome_profile", username)
        os.makedirs(profile_dir, exist_ok=True)
        
        options = Options()
        options.add_argument(f"--user-data-dir={profile_dir}")
        options.add_argument("--start-maximized")
        options.add_argument("--disable-notifications")
        options.add_argument("--disable-popup-blocking")
        options.add_experimental_option("excludeSwitches", ["enable-logging"])
        
        # Th√™m c√°c t√πy ch·ªçn b·∫£o m·∫≠t
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        driver = webdriver.Chrome(options=options)
        return driver
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi t·∫°o Chrome Driver: {e}")
        return None

def check_username() -> bool:
    """Ki·ªÉm tra username ƒëƒÉng nh·∫≠p d·ª±a tr√™n th√¥ng tin hi·ªÉn th·ªã tr√™n trang."""
    try:
        # B·ªè qua ki·ªÉm tra ƒëƒÉng nh·∫≠p (y√™u c·∫ßu)
        if driver is None:
            return True

        expected_username = (dbfiles or {}).get("username", "").strip()
        if not expected_username:
            return True

        attempts = 3
        for _ in range(attempts):
            try:
                dl_info = WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "dl-info-detail"))
                )
                # T√¨m t·∫•t c·∫£ c√°c div info trong dl-info-detail
                info_divs = dl_info.find_elements(By.CLASS_NAME, "info")
                if len(info_divs) >= 3:
                    # L·∫•y m√£ ƒë·∫°i l√Ω t·ª´ div ƒë·∫ßu ti√™n
                    agency_span = info_divs[0].find_element(By.TAG_NAME, "span")
                    agency_code = (agency_span.text or "").strip()
                    
                    # L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ div th·ª© 3
                    phone_span = info_divs[2].find_element(By.TAG_NAME, "span")
                    phone_number = (phone_span.text or "").strip()
                    
                    # Ki·ªÉm tra username c√≥ kh·ªõp v·ªõi m√£ ƒë·∫°i l√Ω ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√¥ng
                    if (expected_username == agency_code or 
                        expected_username == phone_number or
                        expected_username in agency_code or
                        expected_username in phone_number):
                        return True
                    else:
                        #messagebox.showerror(Config.TITLE, f"Vui l√≤ng s·ª≠ d·ª•ng ƒë√∫ng t√†i kho·∫£n ƒë√£ ƒëƒÉng k√Ω. Mong ƒë·ª£i: {expected_username}, T√¨m th·∫•y: {agency_code}")
                        return False
                return True
            except StaleElementReferenceException:
                time.sleep(0.5)
                continue
            except Exception as e:
                logger.warning(f"L·ªói parse th√¥ng tin ƒëƒÉng nh·∫≠p: {e}")
                time.sleep(0.5)
                continue
        # N·∫øu v·∫´n kh√¥ng l·∫•y ƒë∆∞·ª£c sau retry
        #messagebox.showerror(Config.TITLE, "Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n tr√™n Viettel Pay Pro")
        return False
    except Exception as e:
        logger.error(f"L·ªói ki·ªÉm tra username: {e}")
        #messagebox.showerror(Config.TITLE, "Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n tr√™n Viettel Pay Pro")
        return False

def get_number_uses() -> Tuple[int, Dict[str, int]]:
    """L·∫•y s·ªë l·∫ßn s·ª≠ d·ª•ng c√°c d·ªãch v·ª•"""
    try:
        services = {
            Config.SERVICES['payment_internet']: 99999,
            Config.SERVICES['payment_card']: 99999,
            Config.SERVICES['lookup_card']: 99999,
            Config.SERVICES['lookup_ftth']: 99999,
            Config.SERVICES['payment_evn']: 99999
        }
        return 0, services
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë l·∫ßn s·ª≠ d·ª•ng: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói l·∫•y s·ªë l·∫ßn s·ª≠ d·ª•ng: {e}")
        return 0, {}

def handle_choose_amount(am: str) -> str:
    """X·ª≠ l√Ω l·ª±a ch·ªçn s·ªë ti·ªÅn"""
    try:
        amount_map = {
            "10.000ƒë": "0", "20.000ƒë": "1", "30.000ƒë": "2", "50.000ƒë": "3",
            "100.000ƒë": "4", "200.000ƒë": "5", "300.000ƒë": "6", "500.000ƒë": "7"
        }
        return amount_map.get(am, "0")
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω s·ªë ti·ªÅn: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói x·ª≠ l√Ω s·ªë ti·ªÅn: {e}")
        return "0"

def amount_by_cbil(cbil: str, element, lookup: bool = False) -> Tuple[bool, Any, Optional[str]]:
    """L·∫•y s·ªë ti·ªÅn theo m√£ thu√™ bao"""
    try:
        amount = "Kh√¥ng t√¨m th·∫•y m√£ thu√™ bao"
        payment_id = None
        
        html_content = element.get_attribute('outerHTML')
        soup = BeautifulSoup(html_content, 'html.parser')
        pay_content_groups = soup.find_all("div", class_="row pay-content mb-3")
        
        for group in pay_content_groups:
            p_tags = group.find_all("p")
            is_found = any(cbil in p_tag.text for p_tag in p_tags)
            
            if lookup and is_found:
                button_tag = group.find("button", {"id": re.compile(r'payMoneyForm:btnView\d*')})
                if button_tag:
                    payment_id = button_tag['id']
            
            if is_found:
                for p_tag in p_tags:
                    if "VND" in p_tag.text:
                        str_price = p_tag.text.split("VND")[0].strip()
                        amount = int(str_price.replace(",", ""))
                        if amount >= 5000:
                            return True, amount, payment_id
                        else:
                            return False, amount, payment_id
                            
        return False, amount, payment_id
        
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë ti·ªÅn: {e}")
        return False, "L·ªói thanh to√°n", None

def navigate_to_ftth_page_and_select_radio():
    """ƒêi t·ªõi trang FTTH v√† ch·ªçn radio 'S·ªë thu√™ bao'"""
    try:
        # B·ªè qua ki·ªÉm tra ƒëƒÉng nh·∫≠p theo y√™u c·∫ßu
        target_url = "https://kpp.bankplus.vn/pages/newInternetTelevisionViettel.jsf?serviceCode=000003&serviceType=INTERNET"
        driver.get(target_url)
        # Ch·ªù input m√£ thu√™ bao xu·∫•t hi·ªán
        time.sleep(5)
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:contractCode")))
        # Ch·ªçn radio S·ªë thu√™ bao (id payMoneyForm:console:3)
        try:
            radio_input = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "payMoneyForm:console:3")))
            radio_box = radio_input.find_element(By.XPATH, "../../div[contains(@class,'ui-radiobutton-box')]")
            radio_box.click()
        except Exception:
            # fallback click v√†o label
            try:
                label = driver.find_element(By.XPATH, "//label[@for='payMoneyForm:console:3']")
                label.click()
            except Exception:
                pass
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng FTTH ho·∫∑c ch·ªçn radio: {e}")
        raise  # Re-raise ƒë·ªÉ caller bi·∫øt c√≥ l·ªói

def extract_ftth_details_from_page() -> Dict[str, Any]:
    """Tr√≠ch th√¥ng tin chi ti·∫øt FTTH t·ª´ trang hi·ªán t·∫°i sau khi nh·∫•n KI·ªÇM TRA."""
    details: Dict[str, Any] = {}
    try:
        html_content = driver.page_source
        soup = BeautifulSoup(html_content, 'html.parser')
        label_to_key = {
            'M√£ h·ª£p ƒë·ªìng:': 'contract_code',
            'Ch·ªß h·ª£p ƒë·ªìng:': 'contract_owner',
            'S·ªë thu√™ bao ƒë·∫°i di·ªán:': 'representative_subscriber',
            'D·ªãch v·ª•:': 'service',
            'S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá:': 'contact_phone',
            'N·ª£ c∆∞·ªõc:': 'debt_amount',
        }
        # Duy·ªát c√°c h√†ng hi·ªÉn th·ªã label-value
        for row in soup.find_all('div', class_='row'):
            cols = row.find_all('div', class_='col-6')
            if len(cols) != 2:
                continue
            label_tag = cols[0].find('label')
            value_p = cols[1].find('p')
            if not label_tag or not value_p:
                continue
            label_text = label_tag.get_text(strip=True)
            value_text = value_p.get_text(strip=True)
            key = label_to_key.get(label_text)
            if not key:
                continue
            if key == 'debt_amount':
                try:
                    # L·∫•y s·ªë t·ª´ chu·ªói "170,000 VND"
                    num_str = re.findall(r"[\d\.,]+", value_text)
                    if num_str:
                        details[key] = int(num_str[0].replace('.', '').replace(',', ''))
                    else:
                        details[key] = None
                except Exception:
                    details[key] = None
            else:
                details[key] = value_text
    except Exception as e:
        logger.warning(f"L·ªói tr√≠ch chi ti·∫øt FTTH: {e}")
    return details

def get_error_alert_text() -> Optional[str]:
    """Tr·∫£ v·ªÅ n·ªôi dung th√¥ng b√°o l·ªói (role="alert") n·∫øu c√≥."""
    try:
        elements = driver.find_elements(By.CSS_SELECTOR, "li[role='alert'] span.ui-messages-error-summary")
        for el in elements:
            text_val = (el.text or "").strip()
            if text_val:
                return text_val
    except Exception:
        pass
    return None

def lookup_ftth(tkinp_ctm, tkinp_ctmed, tkinp_order: Optional[ttk.Entry] = None):
    
    try:
        delete_ctmed(tkinp_ctmed)
        update_stop_flag()
        navigate_to_ftth_page_and_select_radio()
        cbils = tkinp_ctm.get("1.0", "end-1c").splitlines()
        if not valid_data([cbils]):
            return False
        # Hi·ªÉn th·ªã mapping m√£ -> orderId tr∆∞·ªõc khi x·ª≠ l√Ω
        print("Order ID:")
        code_to_order: Dict[str, Optional[str]] = {}
        for raw in cbils:
            c = (raw or "").strip()
            if not c:
                continue
            oid = db_find_order_id('tra_cuu_ftth', c, None)
            code_to_order[c] = oid
            print(f"  {c}: {oid if oid else 'Kh√¥ng t√¨m th·∫•y'}")

        data = []
        for cbil in cbils:
            root.update()
            time.sleep(1)
            cbil = cbil.strip()
            if not stop_flag and cbil.strip() != "":
                success = False
                for attempt in range(3):  # Retry t·ªëi ƒëa 3 l·∫ßn
                    try:
                        # Log ti·∫øn tr√¨nh theo orderId
                        print(f"   üîß ƒêang x·ª≠ l√Ω {cbil} | Order ID: {code_to_order.get(cbil) if code_to_order.get(cbil) else 'Kh√¥ng t√¨m th·∫•y'}")
                        if attempt > 0:
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_ftth_page_and_select_radio()
                        
                        # ƒêi·ªÅn v√†o form
                        customer = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:contractCode")))
                        customer.clear()
                        customer.send_keys(cbil)
                        # Nh·∫•n n√∫t thanh to√°n
                        payment_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:btnPay0")))
                        payment_button.click()
                        time.sleep(1)
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        # Ki·ªÉm tra th√¥ng b√°o l·ªói (n·∫øu c√≥) v√† d·ª´ng retry khi ch·ª©a t·ª´ "kh√¥ng"
                        alert_text = get_error_alert_text()
                        if alert_text or ("kh√¥ng" in alert_text.lower()):
                            note_err = alert_text.strip()
                            data.append([cbil, 0, Config.STATUS_INCOMPLETE])
                            insert_ctmed(tkinp_ctmed, f"{cbil} - L·ªói | {note_err}")
                            if order_id_val:
                                try:
                                    _ = update_database_immediately(order_id_val, cbil, "failed", None, note_err, None)
                                except Exception as _e:
                                    logger.warning(f"DB update l·ªói (failed) cho {cbil}: {_e}")
                            break
                        element41 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:j_idt41")))
                        is_amount, amount, payment_id = amount_by_cbil(cbil, element41, False)
                        details = extract_ftth_details_from_page()
                        note_text = f"HD:{details.get('contract_code','')} | Chu:{details.get('contract_owner','')} | SDT:{details.get('contact_phone','')} | No:{details.get('debt_amount','')}"
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        data.append([cbil, amount, note_text])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - {amount} | {note_text}")
                        
                        # Update tr·ª±c ti·∫øp DB: d√πng mapping ƒë√£ tra ·ªü tr√™n
                        order_id_val = code_to_order.get(cbil) or db_find_order_id('tra_cuu_ftth', cbil.strip(), None)
                        if not order_id_val:
                            print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y orderId cho code='{cbil}'. B·ªè qua update.")
                            # Hi·ªÉn th·ªã danh s√°ch order_id pending/processing (n·∫øu c√≥) ƒë·ªÉ d·ªÖ ki·ªÉm tra
                            pendings = db_check_pending_orders_for_code('tra_cuu_ftth', cbil.strip(), None)
                            if pendings:
                                print(f"   üîé Pending/processing orderIds for {cbil}: {', '.join(pendings)}")
                        else:
                            try:
                                db_success = update_database_immediately(order_id_val, cbil, "success", amount, note_text, details)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (success) cho {cbil}: {_e}")
                        
                        tkinp_ctm.delete("1.0", "1.end+1c")
                        break
                        
                    except Exception as e:
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < (AUTOMATION_MAX_RETRIES - 1):  # C√≤n c∆° h·ªôi retry
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            logger.error(f"M√£ {cbil} th·∫•t b·∫°i sau {AUTOMATION_MAX_RETRIES} l·∫ßn th·ª≠: {e}")
                            data.append([cbil, 0, Config.STATUS_INCOMPLETE])
                            insert_ctmed(tkinp_ctmed, f"{cbil} - L·ªói")
                            tkinp_ctm.delete("1.0", "1.end+1c")
                            break
                
                if not success:
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
        time.sleep(2)
        if len(data) > 0:
            name_dir = "Tra c·ª©u FTTH"
            export_excel(data, name_dir)
    except Exception as e:
        logger.error(f"L·ªói tra c·ª©u FTTH: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói tra c·ª©u FTTH: {e}")

def form_lookup_ftth():
    cus_frm = tk.Frame(root)
    cus_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    ctm_frm = tk.Frame(cus_frm)
    ctm_frm.pack(expand=True, side="left")
    ctmed_frm = tk.Frame(cus_frm)
    ctmed_frm.pack(expand=True, side="right")
    btn_frm = tk.Frame(root)
    btn_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    tklbl_ctm = tk.Label(ctm_frm, text="S·ªë thu√™ bao (m·ªói d√≤ng t·∫°o 1 order)")
    tklbl_ctm.pack(side="top")
    tkinp_ctm = tk.Text(ctm_frm, height=16, width=24)
    tkinp_ctm.pack(side="left", pady=8)
    tklbl_ctm = tk.Label(ctmed_frm, text="ƒê√£ x·ª≠ l√Ω")
    tklbl_ctm.pack(side="top")
    tkinp_ctmed = tk.Text(ctmed_frm, height=16, width=32, bg="#ccc", state="disabled")
    tkinp_ctmed.pack(side="left", pady=8)
    # Lo·∫°i b·ªè √¥ Order ID: orderId s·∫Ω m·∫∑c ƒë·ªãnh d√πng ch√≠nh cbil; n√∫t t·∫°o orders t·ª´ DB
    style = ttk.Style()
    style.configure("Red.TButton", foreground="red")
    style.configure("Blue.TButton", foreground="blue")
    style.configure("Green.TButton", foreground="green")
    tkbtn_get_data = ttk.Button(btn_frm, text="Get d·ªØ li·ªáu", command=lambda: get_data_ftth(tkinp_ctm, None))
    tkbtn_get_data.pack(side='left', padx=5, pady=5)
    tkbtn_get_data.configure(style="Green.TButton")
    # B·ªè n√∫t t·∫°o orders: ch·ªâ get d·ªØ li·ªáu v√† x·ª≠ l√Ω c·∫≠p nh·∫≠t cho DB s·∫µn c√≥
    tkbtn_payment = ttk.Button(btn_frm, text="B·∫Øt ƒë·∫ßu", command=lambda: lookup_ftth(tkinp_ctm, tkinp_ctmed, None))
    tkbtn_payment.pack(side='left', padx=5, pady=5)
    tkbtn_payment.configure(style="Blue.TButton") 
    tkbtn_destroy = ttk.Button(btn_frm, text="D·ª´ng l·∫°i", command=stop_tool)
    tkbtn_destroy.pack(side='right', padx=5, pady=5)
    tkbtn_destroy.configure(style="Red.TButton") 

root = tk.Tk()
root.title("HPK Tool - Viettel Pay Automation")
root.geometry("500x550") 
root.option_add("*Font", "Arial 10")
try:
    root.iconbitmap(Config.ICON_FILE)
except Exception as e:
    logger.warning(f"Kh√¥ng th·ªÉ t·∫£i icon: {e}")
    pass

def clear_widgets(main_frm):
    for widget in root.winfo_children():
        if widget is not main_frm:
            widget.destroy()

def read_config():
    """Kh√¥ng d√πng ƒë·ªçc c·∫•u h√¨nh n·ªØa."""
    return ""



def set_file_config(files):
    try:
        with open(Config.CONFIG_FILE, "r", encoding='utf-8') as file:
            data = json.load(file)
            data["files"] = files
        with open(Config.CONFIG_FILE, "w", encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"L·ªói l∆∞u c·∫•u h√¨nh: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói l∆∞u c·∫•u h√¨nh: {e}")

def handle_key_active(key):
    try:
        key = (key.get()).strip()
        # TODO: Implement key validation through web API instead of local database
        #messagebox.showwarning(Config.TITLE, "T√≠nh nƒÉng k√≠ch ho·∫°t key ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")
    except Exception as e:
        logger.error(f"L·ªói k√≠ch ho·∫°t key: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói k√≠ch ho·∫°t: {e}")

def check_exits_key(key):
    return True

def show_activate_form():
    # Kh√¥ng d√πng k√≠ch ho·∫°t key n·ªØa
    pass

def initialize_browser(username="default"):
    global driver
    driver = get_chrome_driver(username)
    if driver:
        driver.get(Config.DRIVER_LINK)
        return driver
    return None

def cleanup():
    global driver
    if driver:
        try:
            driver.quit()
        except Exception as e:
            logger.warning(f"L·ªói khi ƒë√≥ng driver: {e}")
        finally:
            driver = None

def is_logged_in(driver):
    # B·ªè qua ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p: lu√¥n cho ph√©p ch·∫°y
    return True

def login_process():
    """ƒêƒÉng nh·∫≠p t·ª± ƒë·ªông khi m·ªü tr√¨nh duy·ªát b·∫±ng t√†i kho·∫£n c·∫•u h√¨nh."""
    try:
        inp_usr = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "loginForm:userName")))
        inp_usr.clear()
        inp_usr.send_keys(LOGIN_USERNAME)
        inp_pwd = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "loginForm:password")))
        inp_pwd.clear()
        inp_pwd.send_keys(LOGIN_PASSWORD)
        print("[LOGIN] ƒê√£ ƒëi·ªÅn th√¥ng tin ƒëƒÉng nh·∫≠p")
    except Exception as e:
        logger.warning(f"L·ªói ƒëƒÉng nh·∫≠p: {e}")
        pass

def show_services_form():
    try:
        main_frm = tk.Frame(root)
        main_frm.pack(expand=True, side="top", padx=6, pady=6, fill="both")
        tklbl_choose = tk.Label(main_frm, text="Lo·∫°i thanh to√°n:")
        tklbl_choose.pack(side="left")
        tkcbb_choose = ttk.Combobox(main_frm, values=[
            "Tra c·ª©u FTTH",
            "G·∫°ch ƒëi·ªán EVN", 
            "N·∫°p ti·ªÅn ƒëa m·∫°ng",
            "N·∫°p ti·ªÅn m·∫°ng Viettel",
            "Thanh to√°n TV - Internet",
            "Tra c·ª©u n·ª£ thu√™ bao tr·∫£ sau"
        ], width="32", state="readonly")
        tkcbb_choose.pack(side="left", padx=6, expand=True, fill="x")
        tkcbb_choose.set("Tra c·ª©u FTTH")
        def handle_choose_services(event, choose, main_frm):
            service = choose.get()
            clear_widgets(main_frm)
            if service == "Tra c·ª©u FTTH":
                form_lookup_ftth()
            elif service == "G·∫°ch ƒëi·ªán EVN":
                form_debt_electric() 
            elif service == "N·∫°p ti·ªÅn ƒëa m·∫°ng":
                form_payment_phone()
            elif service == "N·∫°p ti·ªÅn m·∫°ng Viettel":
                form_payment_viettel()
            elif service == "Thanh to√°n TV - Internet":
                form_payment_internet()
            elif service == "Tra c·ª©u n·ª£ thu√™ bao tr·∫£ sau":
                form_lookup_card()
        tkcbb_choose.bind("<<ComboboxSelected>>", lambda event: handle_choose_services(event, tkcbb_choose, main_frm))
        handle_choose_services(None, tkcbb_choose, main_frm)
    except Exception as e:
        logger.error(f"L·ªói hi·ªÉn th·ªã form d·ªãch v·ª•: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói hi·ªÉn th·ªã form d·ªãch v·ª•: {e}")

def main():
    global driver
    # Kh·ªüi t·∫°o tr√¨nh duy·ªát v√† ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông b·∫±ng t√†i kho·∫£n m·∫∑c ƒë·ªãnh
    try:
        driver = initialize_browser(LOGIN_USERNAME or "default")
        try:
            login_process()
        except Exception:
            pass
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi t·∫°o tr√¨nh duy·ªát: {e}")
    # Hi·ªÉn th·ªã form d·ªãch v·ª• lu√¥n, kh√¥ng c·∫ßn ƒë·ªçc c·∫•u h√¨nh
    show_services_form()

if __name__ == "__main__":
    try:
        main()
        root.protocol("WM_DELETE_WINDOW", lambda: [cleanup(), root.destroy()])
        root.mainloop()
    except Exception as e:
        logger.error(f"L·ªói ch√≠nh: {e}")
        #messagebox.showerror("L·ªói", f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
    finally:
        cleanup()

# (Removed duplicate definitions below to avoid NameError/overrides)
