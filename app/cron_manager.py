#!/usr/bin/env python3
"""
Cron Manager - Qu·∫£n l√Ω l·ªãch ch·∫°y c√°c service
S·ª≠ d·ª•ng Service Manager m·ªõi ƒë·ªÉ g·ªçi t·∫•t c·∫£ h√†m
Kh·ªüi ƒë·ªông Chrome s·∫µn v√† ch·∫ø ƒë·ªô l·∫∑p test
"""

import os
import sys
import time
import json
import logging
import schedule
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path
PARENT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if PARENT_DIR not in sys.path:
    sys.path.insert(0, PARENT_DIR)

from app.config import Config

# Import t·∫•t c·∫£ h√†m t·ª´ Service Manager
from app.services.service_manager import (
    # FTTH Service
    get_data_ftth, lookup_ftth,
    
    # EVN Service  
    get_data_evn, debt_electric,
    
    # Topup Multi Service
    get_data_multi_network, payment_phone_multi,
    
    # Topup Viettel Service
    get_data_viettel, payment_phone_viettel,
    
    # TV-Internet Service
    get_data_tv_internet, payment_internet,
    
    # Postpaid Service
    get_data_postpaid, payment_phone_postpaid,
    
    # Selenium Control Functions
    navigate_to_page, wait_for_element, click_element, fill_input
)

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CronManager:
    """Qu·∫£n l√Ω cron jobs cho c√°c service"""
    
    def __init__(self, test_mode: bool = False, test_interval: int = 10):
        self.config = self.load_config()
        self.running_services = set()
        self.global_lock = False
        self.max_concurrent = self.config.get('global_settings', {}).get('max_concurrent_services', 2)
        
        # Ch·∫ø ƒë·ªô test
        self.test_mode = test_mode
        self.test_interval = test_interval
        
        # Kh·ªüi ƒë·ªông Chrome s·∫µn
        self.chrome_driver = None
        self.init_chrome_driver()
        
        # Mapping service names v·ªõi functions
        self.service_functions = {
            'ftth': {
                'get_data': get_data_ftth,
                'action': lookup_ftth,
                'description': 'Tra c·ª©u FTTH'
            },
            'evn': {
                'get_data': get_data_evn,
                'action': debt_electric,
                'description': 'G·∫°ch ƒëi·ªán EVN'
            },
            'topup_multi': {
                'get_data': get_data_multi_network,
                'action': payment_phone_multi,
                'description': 'N·∫°p ti·ªÅn ƒëa m·∫°ng'
            },
            'topup_viettel': {
                'get_data': get_data_viettel,
                'action': payment_phone_viettel,
                'description': 'N·∫°p ti·ªÅn Viettel'
            },
            'tv_internet': {
                'get_data': get_data_tv_internet,
                'action': payment_internet,
                'description': 'Thanh to√°n TV-Internet'
            },
            'postpaid': {
                'get_data': get_data_postpaid,
                'action': payment_phone_postpaid,
                'description': 'Tra c·ª©u n·ª£ tr·∫£ sau'
            }
        }
        
        logger.info("üöÄ CronManager ƒë√£ kh·ªüi t·∫°o v·ªõi Service Manager m·ªõi")
        logger.info(f"üìä T·ªïng s·ªë service: {len(self.service_functions)}")
        logger.info(f"üîß Max concurrent: {self.max_concurrent}")
        if self.test_mode:
            logger.info(f"üß™ Ch·∫ø ƒë·ªô TEST: l·∫∑p sau {self.test_interval} gi√¢y")
        if self.chrome_driver:
            logger.info("üåê Chrome driver ƒë√£ s·∫µn s√†ng")
        else:
            logger.warning("‚ö†Ô∏è Chrome driver ch∆∞a s·∫µn s√†ng")
    
    def init_chrome_driver(self):
        """Kh·ªüi ƒë·ªông Chrome driver s·∫µn"""
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            from selenium.webdriver.chrome.service import Service
            from webdriver_manager.chrome import ChromeDriverManager
            
            # C·∫•u h√¨nh Chrome options
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--start-maximized")
            
            # Kh·ªüi ƒë·ªông Chrome
            logger.info("üåê ƒêang kh·ªüi ƒë·ªông Chrome...")
            self.chrome_driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=chrome_options
            )
            
            # Test Chrome
            self.chrome_driver.get("https://www.google.com")
            time.sleep(2)
            logger.info("‚úÖ Chrome ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng")
            
            # ƒê√≥ng tab test
            self.chrome_driver.close()
            self.chrome_driver.switch_to.window(self.chrome_driver.window_handles[0])
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi ƒë·ªông Chrome: {e}")
            self.chrome_driver = None
    
    def get_chrome_driver(self):
        """L·∫•y Chrome driver"""
        if self.chrome_driver is None:
            logger.warning("‚ö†Ô∏è Chrome driver ch∆∞a s·∫µn s√†ng, th·ª≠ kh·ªüi ƒë·ªông l·∫°i...")
            self.init_chrome_driver()
        return self.chrome_driver
    
    def load_config(self) -> Dict[str, Any]:
        """Load c·∫•u h√¨nh t·ª´ file"""
        try:
            config_path = os.path.join(os.getcwd(), 'cron_config.json')
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    logger.info("‚úÖ ƒê√£ load c·∫•u h√¨nh cron")
                    return config
            else:
                logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y cron_config.json, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")
                return self.get_default_config()
        except Exception as e:
            logger.error(f"‚ùå L·ªói load c·∫•u h√¨nh: {e}")
            return self.get_default_config()
    
    def get_default_config(self) -> Dict[str, Any]:
        """C·∫•u h√¨nh m·∫∑c ƒë·ªãnh"""
        return {
            "services": {
                "ftth": {"enabled": True, "interval_minutes": 25, "priority": 1},
                "evn": {"enabled": True, "interval_minutes": 60, "priority": 5},
                "topup_multi": {"enabled": True, "interval_minutes": 15, "priority": 2},
                "topup_viettel": {"enabled": True, "interval_minutes": 15, "priority": 3},
                "tv_internet": {"enabled": True, "interval_minutes": 45, "priority": 4},
                "postpaid": {"enabled": True, "interval_minutes": 60, "priority": 6}
            },
            "global_settings": {
                "max_concurrent_services": 2,
                "sequential_execution": True
            }
        }
    
    def save_config(self):
        """L∆∞u c·∫•u h√¨nh"""
        try:
            config_path = os.path.join(os.getcwd(), 'cron_config.json')
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            logger.info("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh cron")
        except Exception as e:
            logger.error(f"‚ùå L·ªói l∆∞u c·∫•u h√¨nh: {e}")
    
    def can_run_service(self, service_name: str) -> bool:
        """Ki·ªÉm tra service c√≥ th·ªÉ ch·∫°y kh√¥ng"""
        if self.global_lock:
            return False
        
        if len(self.running_services) >= self.max_concurrent:
            return False
        
        if service_name in self.running_services:
            return False
        
        return True
    
    def mark_service_running(self, service_name: str):
        """ƒê√°nh d·∫•u service ƒëang ch·∫°y"""
        self.running_services.add(service_name)
        logger.info(f"üü¢ Service {service_name} ƒë√£ b·∫Øt ƒë·∫ßu ch·∫°y")
    
    def mark_service_finished(self, service_name: str):
        """ƒê√°nh d·∫•u service ƒë√£ ho√†n th√†nh"""
        self.running_services.discard(service_name)
        logger.info(f"üî¥ Service {service_name} ƒë√£ ho√†n th√†nh")
    
    def run_service(self, service_name: str):
        """Ch·∫°y service c·ª• th·ªÉ"""
        if not self.can_run_service(service_name):
            logger.warning(f"‚ö†Ô∏è Service {service_name} kh√¥ng th·ªÉ ch·∫°y ngay b√¢y gi·ªù")
            return
        
        try:
            self.mark_service_running(service_name)
            
            # L·∫•y th√¥ng tin service
            service_info = self.service_functions.get(service_name)
            if not service_info:
                logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin service: {service_name}")
                return
            
            logger.info(f"üöÄ B·∫Øt ƒë·∫ßu ch·∫°y {service_info['description']}")
            
            # Ki·ªÉm tra Chrome driver
            if not self.get_chrome_driver():
                logger.error(f"‚ùå Chrome driver kh√¥ng s·∫µn s√†ng, b·ªè qua {service_name}")
                return
            
            # G·ªçi h√†m get_data tr∆∞·ªõc
            self._call_get_data(service_name, service_info['get_data'])
            
            # G·ªçi h√†m action ch√≠nh
            self._call_action(service_name, service_info['action'])
            
            logger.info(f"‚úÖ Ho√†n th√†nh {service_info['description']}")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói ch·∫°y service {service_name}: {e}")
        finally:
            self.mark_service_finished(service_name)
    
    def _call_get_data(self, service_name: str, get_data_func):
        """G·ªçi h√†m get_data c·ªßa service"""
        try:
            logger.info(f"üì• G·ªçi get_data cho {service_name}")
            
            # T·∫°o mock UI elements cho get_data
            from tkinter import Text, Entry
            mock_text = Text()
            mock_entry = Entry()
            
            # G·ªçi get_data function v·ªõi mock UI
            if service_name == 'ftth':
                get_data_func(mock_text, None)
            elif service_name == 'evn':
                get_data_func(mock_text, mock_entry, mock_entry)
            elif service_name in ['topup_multi', 'topup_viettel']:
                get_data_func(mock_text, mock_entry)
            elif service_name == 'tv_internet':
                get_data_func(mock_text, mock_entry)
            elif service_name == 'postpaid':
                get_data_func(mock_text)
            
            logger.info(f"‚úÖ get_data cho {service_name} th√†nh c√¥ng")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói get_data cho {service_name}: {e}")
    
    def _call_action(self, service_name: str, action_func):
        """G·ªçi h√†m action ch√≠nh c·ªßa service"""
        try:
            logger.info(f"üöÄ G·ªçi action cho {service_name}")
            
            # T·∫°o mock UI elements cho action
            from tkinter import Text, Entry
            mock_text_input = Text()
            mock_text_output = Text()
            mock_entry = Entry()
            
            # G·ªçi action function v·ªõi mock UI
            if service_name == 'ftth':
                action_func(mock_text_input, mock_text_output, None)
            elif service_name == 'evn':
                action_func(mock_text_input, mock_text_output, mock_entry, mock_entry)
            elif service_name in ['topup_multi', 'topup_viettel']:
                action_func(mock_text_input, mock_text_output, mock_entry, mock_entry, mock_entry)
            elif service_name == 'tv_internet':
                action_func(mock_text_input, mock_text_output, mock_entry)
            elif service_name == 'postpaid':
                action_func(mock_text_input, mock_text_output, mock_entry, mock_entry, mock_entry)
            
            logger.info(f"‚úÖ action cho {service_name} th√†nh c√¥ng")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói action cho {service_name}: {e}")
    
    def setup_schedule(self):
        """Thi·∫øt l·∫≠p l·ªãch ch·∫°y"""
        try:
            # X√≥a t·∫•t c·∫£ job c≈©
            schedule.clear()
            
            # Thi·∫øt l·∫≠p job cho t·ª´ng service
            for service_name, service_config in self.config.get('services', {}).items():
                if service_config.get('enabled', False):
                    interval = service_config.get('interval_minutes', 60)
                    schedule.every(interval).minutes.do(self.run_service, service_name)
                    logger.info(f"‚è∞ ƒê√£ l√™n l·ªãch {service_name}: m·ªói {interval} ph√∫t")
            
            logger.info("‚úÖ ƒê√£ thi·∫øt l·∫≠p l·ªãch ch·∫°y cho t·∫•t c·∫£ service")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói thi·∫øt l·∫≠p l·ªãch: {e}")
    
    def run_test_loop(self):
        """Ch·∫°y v√≤ng l·∫∑p test"""
        if not self.test_mode:
            logger.warning("‚ö†Ô∏è Kh√¥ng ph·∫£i ch·∫ø ƒë·ªô test")
            return
        
        logger.info(f"üß™ B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô TEST - l·∫∑p sau {self.test_interval} gi√¢y")
        
        try:
            while True:
                logger.info("üîÑ B·∫Øt ƒë·∫ßu v√≤ng test m·ªõi...")
                
                # Ch·∫°y t·∫•t c·∫£ service theo th·ª© t·ª±
                for service_name in ['ftth', 'evn', 'topup_multi', 'topup_viettel', 'tv_internet', 'postpaid']:
                    if self.can_run_service(service_name):
                        logger.info(f"üß™ Test service: {service_name}")
                        self.run_service(service_name)
                        time.sleep(2)  # Ch·ªù gi·ªØa c√°c service
                    else:
                        logger.info(f"‚è∏Ô∏è Service {service_name} kh√¥ng th·ªÉ ch·∫°y ngay")
                
                logger.info(f"‚è≥ Ch·ªù {self.test_interval} gi√¢y tr∆∞·ªõc v√≤ng ti·∫øp theo...")
                time.sleep(self.test_interval)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è D·ª´ng ch·∫ø ƒë·ªô test...")
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong ch·∫ø ƒë·ªô test: {e}")
    
    def start(self):
        """B·∫Øt ƒë·∫ßu cron manager"""
        try:
            logger.info("üöÄ B·∫Øt ƒë·∫ßu Cron Manager...")
            
            if self.test_mode:
                # Ch·∫ø ƒë·ªô test
                self.run_test_loop()
            else:
                # Ch·∫ø ƒë·ªô cron b√¨nh th∆∞·ªùng
                self.setup_schedule()
                
                while True:
                    schedule.run_pending()
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è D·ª´ng Cron Manager...")
        except Exception as e:
            logger.error(f"‚ùå L·ªói Cron Manager: {e}")
        finally:
            # ƒê√≥ng Chrome driver
            if self.chrome_driver:
                try:
                    self.chrome_driver.quit()
                    logger.info("üåê ƒê√£ ƒë√≥ng Chrome driver")
                except:
                    pass
    
    def get_status(self) -> Dict[str, Any]:
        """L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i"""
        return {
            'active_count': len(self.running_services),
            'max_concurrent': self.max_concurrent,
            'running_services': list(self.running_services),
            'test_mode': self.test_mode,
            'chrome_ready': self.chrome_driver is not None,
            'timestamp': datetime.now().isoformat()
        }
    
    def enable_service(self, service_name: str, enabled: bool):
        """B·∫≠t/t·∫Øt service"""
        if service_name in self.config.get('services', {}):
            self.config['services'][service_name]['enabled'] = enabled
            self.save_config()
            logger.info(f"‚úÖ Service {service_name}: {'ƒë√£ b·∫≠t' if enabled else 'ƒë√£ t·∫Øt'}")
        else:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y service: {service_name}")
    
    def update_interval(self, service_name: str, interval_minutes: int):
        """C·∫≠p nh·∫≠t interval cho service"""
        if service_name in self.config.get('services', {}):
            self.config['services'][service_name]['interval_minutes'] = interval_minutes
            self.save_config()
            logger.info(f"‚úÖ Service {service_name}: interval = {interval_minutes} ph√∫t")
        else:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y service: {service_name}")

def main():
    """H√†m ch√≠nh"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Cron Manager v·ªõi Service Manager')
    parser.add_argument('--test', action='store_true', help='Ch·∫ø ƒë·ªô test (l·∫∑p sau 10 gi√¢y)')
    parser.add_argument('--interval', type=int, default=10, help='Kho·∫£ng th·ªùi gian gi·ªØa c√°c v√≤ng test (gi√¢y)')
    
    args = parser.parse_args()
    
    try:
        cron = CronManager(test_mode=args.test, test_interval=args.interval)
        cron.start()
    except Exception as e:
        logger.error(f"‚ùå L·ªói ch√≠nh: {e}")

if __name__ == "__main__":
    main()
