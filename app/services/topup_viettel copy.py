# Viettel topup service module

import logging
from typing import List, Optional
import tkinter as tk
from tkinter import ttk, #messagebox
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

from ..config import Config
from ..db import update_database_immediately
from ..utils.browser import driver, ensure_driver_and_login, automation_lock
from ..utils.ui_helpers import (
    populate_text_widget,
    populate_entry_widget,
    insert_ctmed,
    delete_ctmed,
    valid_data,
    stop_flag,
    get_root,
    maybe_update_ui,
    stop_tool,
    update_stop_flag,
)
from ..utils.api_client import fetch_api_data
from ..utils.excel_export import export_excel

logger = logging.getLogger(__name__)

def process_topup_viettel_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω n·∫°p ti·ªÅn Viettel kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Topup Viettel cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang Topup Viettel...")
            navigate_to_topup_viettel_page()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang Topup Viettel")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(3):  # Retry t·ªëi ƒëa 3 l·∫ßn
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/3 cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_topup_viettel_page()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        maybe_update_ui()
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i: {cbil}")
                        phone_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:phoneNumber")))
                        phone_input.clear()
                        phone_input.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t TI·∫æP T·ª§C...")
                        continue_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "payMoneyForm:btnContinue")))
                        continue_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng cho s·ªë ƒëi·ªán tho·∫°i {cbil}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": None, "status": "success"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            db_success = update_database_immediately(order_id, cbil, "success", None, "Topup Viettel ok", None)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < 2:  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"Topup Viettel code {cbil} th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω Topup Viettel:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"Topup Viettel processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_topup_viettel_codes error: {e}")

def get_data_viettel(text_widget, pin_widget, amount_widget):
    """L·∫•y d·ªØ li·ªáu API cho N·∫°p ti·ªÅn m·∫°ng Viettel"""
    try:
        data = fetch_api_data("nap_tien_viettel")
        if data:
            if "phone_numbers" in data:
                populate_text_widget(text_widget, data["phone_numbers"])
            # T·ª± ƒë·ªông ƒëi·ªÅn m√£ PIN t·ª´ config
            print(f"[DEBUG] T·ª± ƒë·ªông ƒëi·ªÅn m√£ PIN: {Config.DEFAULT_PIN}")
            populate_entry_widget(pin_widget, Config.DEFAULT_PIN)
            
            if "amount" in data:
                populate_entry_widget(amount_widget, data["amount"])
            
            count = len(data.get("phone_numbers", []))
            order_id = data.get("order_id")
            info_msg = f"ƒê√£ t·∫£i {count} s·ªë ƒëi·ªán tho·∫°i Viettel"
            if order_id:
                print(f"[INFO] Order ID t·ª´ DB: {order_id}", flush=True)
                logger.info(f"Order ID t·ª´ DB (Viettel): {order_id}")
                info_msg += f"\nOrder ID: {order_id}"
            #messagebox.showinfo(Config.TITLE, info_msg)
        else:
            #messagebox.showwarning(Config.TITLE, "Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ DB")
    except Exception as e:
        logger.error(f"L·ªói l·∫•y d·ªØ li·ªáu Viettel: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói l·∫•y d·ªØ li·ªáu Viettel: {e}")

def navigate_to_topup_viettel_page():
    """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang n·∫°p ti·ªÅn Viettel."""
    try:
        
        target_url = "https://kpp.bankplus.vn/pages/chargecard.jsf"
        driver.get(target_url)
        # Ch·ªù input s·ªë ƒëi·ªán tho·∫°i xu·∫•t hi·ªán
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:phoneNumber")))
        time.sleep(2)
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng Topup Viettel: {e}")
        raise


def payment_viettel(tkinp_ctm, tkinp_ctmed, tkinp_pin, tkinp_amount):
    try:
        delete_ctmed(tkinp_ctmed)
        update_stop_flag()
        pin = tkinp_pin.get()
        amount = tkinp_amount.get()
        cbils = tkinp_ctm.get("1.0", "end-1c").splitlines()
        if not valid_data([cbils, pin, amount]):
            return False
        data = []
        for cbil in cbils:
            get_root().update()
            time.sleep(0.5)
            cbil = cbil.strip()
            if not stop_flag and cbil.strip() != "":
                time.sleep(0.5)
                try:
                    phonenum = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
                    phonenum.clear()
                    phonenum.send_keys(cbil)
                    phonenum.send_keys(Keys.TAB)
                    time.sleep(0.5)
                except:
                    time.sleep(2)
                    phonenum = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
                    phonenum.clear()
                    phonenum.send_keys(cbil)
                    phonenum.send_keys(Keys.TAB)
                try:
                    cfm_modalTT = WebDriverWait(driver, 2).until(EC.presence_of_element_located((By.ID, "indexForm:dlgConfirmTT_modal")))
                    driver.execute_script("arguments[0].style.zIndex = '-99';", cfm_modalTT)
                    time.sleep(0.5)
                    spl_lbl = WebDriverWait(driver, 2).until(EC.presence_of_element_located((By.ID, "indexForm:supplier")))
                    spl_lbl.click()
                    time.sleep(0.5)
                    spl_0 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:supplier_0")))
                    spl_0.click()
                    time.sleep(0.5)
                    cfm_pay = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:yesTTId")))
                    cfm_pay.click()
                    time.sleep(0.5)
                except:
                    pass
                try:
                    inp_amount = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:transAmountId_input")))
                    inp_amount.clear()
                    inp_amount.send_keys(amount)
                    time.sleep(0.5)
                    pin_id = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:pinId")))
                    pin_id.clear()
                    pin_id.send_keys(pin)
                    time.sleep(0.5)
                    btn_pay = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:btnPay")))
                    btn_pay.click()
                    time.sleep(0.5)
                    try:
                        cfm_modal = WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.ID, "indexForm:dlgConfirm_modal")))
                        driver.execute_script("arguments[0].style.zIndex = '-99';", cfm_modal)
                    except:
                        pass
                    btn_confirm = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:yesIdCard")))
                    btn_confirm.click()
                    data.append([cbil, amount, Config.STATUS_COMPLETE])
                    insert_ctmed(tkinp_ctmed, f"{cbil} - {amount}")
                    tkinp_ctm.delete("1.0", "1.end+1c")
                except:
                    data.append([cbil, 0, Config.STATUS_INCOMPLETE])
                    insert_ctmed(tkinp_ctmed, f"{cbil} - null")
                    tkinp_ctm.delete("1.0", "1.end+1c")
                    continue
        time.sleep(2)
        if len(data) > 0:
            name_dir = "N·∫°p ti·ªÅn m·∫°ng Viettel"
            export_excel(data, name_dir)
    except Exception as e:
        logger.error(f"L·ªói thanh to√°n Viettel: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói thanh to√°n Viettel: {e}")

def form_payment_viettel():
    r = get_root()
    cus_frm = tk.Frame(r)
    cus_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    ctm_frm = tk.Frame(cus_frm)
    ctm_frm.pack(expand=True, side="left")
    ctmed_frm = tk.Frame(cus_frm)
    ctmed_frm.pack(expand=True, side="right")
    form_frm = tk.Frame(r)
    form_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    pin_frm = tk.Frame(r)
    pin_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    button_frm = tk.Frame(r)
    button_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    tklbl_ctm = tk.Label(ctm_frm, text="S·ªë ƒëi·ªán tho·∫°i")
    tklbl_ctm.pack(side="top")
    tkinp_ctm = tk.Text(ctm_frm, height=12, width=24)
    tkinp_ctm.pack(side="left", pady=8)
    tklbl_ctm = tk.Label(ctmed_frm, text="ƒê√£ x·ª≠ l√Ω")
    tklbl_ctm.pack(side="top")
    tkinp_ctmed = tk.Text(ctmed_frm, width=32, height=12, bg="#ccc", state="disabled")
    tkinp_ctmed.pack(side="left", pady=8)
    tkinp_amount = tk.Entry(pin_frm, width=12)
    tkinp_amount.pack(side="right", padx=4)
    tklbl_amount = tk.Label(pin_frm, text="S·ªë ti·ªÅn n·∫°p:")
    tklbl_amount.pack(side="right")
    tklbl_pin = tk.Label(pin_frm, text="M√£ pin:")
    tklbl_pin.pack(side="left")
    tkinp_pin = ttk.Entry(pin_frm, width=12)
    tkinp_pin.pack(side="left", padx=4)
    style = ttk.Style()
    style.configure("Red.TButton", foreground="red")
    style.configure("Blue.TButton", foreground="blue")
    style.configure("Green.TButton", foreground="green")
    tkbtn_get_data = ttk.Button(button_frm, text="Get d·ªØ li·ªáu", command=lambda: get_data_viettel(tkinp_ctm, tkinp_pin, tkinp_amount))
    tkbtn_get_data.pack(side='left', padx=5, pady=5)
    tkbtn_get_data.configure(style="Green.TButton")
    tkbtn_payment = ttk.Button(button_frm, text="B·∫Øt ƒë·∫ßu", command=lambda: payment_viettel(tkinp_ctm, tkinp_ctmed, tkinp_pin, tkinp_amount))
    tkbtn_payment.pack(side='left', padx=5, pady=5)
    tkbtn_payment.configure(style="Blue.TButton") 
    tkbtn_destroy = ttk.Button(button_frm, text="D·ª´ng l·∫°i", command=stop_tool)
    tkbtn_destroy.pack(side='right', padx=5, pady=5)
    tkbtn_destroy.configure(style="Red.TButton") 
