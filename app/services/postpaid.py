"""Postpaid lookup service module"""

import logging
from typing import List, Optional
import tkinter as tk
from tkinter import ttk, messagebox
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

from ..config import Config
from ..db import (
    update_database_immediately,
    db_find_order_id,
    db_fetch_service_data,
)
from ..utils.browser import driver, ensure_driver_and_login, automation_lock, get_info_alert_text, get_error_alert_text
from ..utils.ui_helpers import (
    populate_text_widget,
    insert_ctmed,
    delete_ctmed,
    valid_data,
    stop_flag,
    get_root,
    update_stop_flag,
    stop_tool,
)
from ..utils.excel_export import export_excel
from ..utils.api_client import fetch_api_data

# Import amount_by_cbil function
try:
    from ..utils.ui_helpers import amount_by_cbil
except ImportError:
    # Fallback n·∫øu kh√¥ng import ƒë∆∞·ª£c
    def amount_by_cbil(cbil, element, lookup=False):
        try:
            amount_text = element.text.strip()
            if amount_text and amount_text.replace(".", "").replace(",", "").isdigit():
                amount = int(amount_text.replace(".", "").replace(",", ""))
                return True, amount, None
            return False, 0, None
        except:
            return False, 0, None

logger = logging.getLogger(__name__)


def get_data_postpaid(text_widget):
    """L·∫•y d·ªØ li·ªáu API cho Tra c·ª©u n·ª£ thu√™ bao tr·∫£ sau"""
    try:
        data = db_fetch_service_data("tra_cuu_no_tra_sau")
        print("Tra c·ª©u n·ª£ tr·∫£ sau:")
        print(data)
        if data and "subscriber_codes" in data:
            codes = [c.strip() for c in data.get("subscriber_codes", [])]
            
            # Gh√©p code|order_id t·ª´ code_order_map
            code_order_map = data.get("code_order_map", [])
            display_codes = []
            for m in code_order_map:
                code_clean = (m.get("code") or "").strip()
                oid = m.get("orderId") or ""
                display_codes.append(f"{code_clean}|{oid}")
            populate_text_widget(text_widget, display_codes)
    
            # D√πng code_order_map thay v√¨ ch·ªâ l·∫•y latest order_id
            map_texts = []
            for m in code_order_map:
                code_clean = (m.get("code") or "").strip()
                oid = m.get("orderId")
                map_texts.append(f"{code_clean}: {oid if oid else 'Kh√¥ng c√≥'}")
    
            info_msg = f"ƒê√£ t·∫£i {len(codes)} m√£ thu√™ bao Postpaid\n"
            info_msg += "\n".join(map_texts)
    
            #messagebox.showinfo(Config.TITLE, info_msg)
        else:
            pass  # Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ DB

    except Exception as e:
        logger.error(f"L·ªói l·∫•y d·ªØ li·ªáu Postpaid: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói l·∫•y d·ªØ li·ªáu Postpaid: {e}")



def navigate_to_postpaid_lookup_page():
    """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang tra c·ª©u tr·∫£ sau."""
    try:
        target_url = "https://kpp.bankplus.vn/pages/chargecard.jsf"
        driver.get(target_url)
        # Ch·ªù input m√£ thu√™ bao xu·∫•t hi·ªán
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
        time.sleep(2)
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng Postpaid: {e}")
        raise


def lookup_card(tkinp_ctm, tkinp_ctmed):
    try:
        delete_ctmed(tkinp_ctmed)
        update_stop_flag()
        cbils = tkinp_ctm.get("1.0", "end-1c").splitlines()
        if not valid_data([cbils]):
            return False

        data_rows = []
        for raw in cbils:
            time.sleep(1)
            raw = (raw or "").strip()
            if not raw:
                continue

            # --- T√ÅCH CODE|ORDER_ID ---
            if "|" in raw:
                cbil, order_id_val = raw.split("|", 1)
                cbil = cbil.strip()
                order_id_val = order_id_val.strip()
            else:
                cbil = raw
                order_id_val = None
            
            get_root().update()
            time.sleep(1)
            if not stop_flag:
                # ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang tra c·ª©u tr·∫£ sau tr∆∞·ªõc khi x·ª≠ l√Ω
                print(f"   üîß ƒêang x·ª≠ l√Ω {cbil} | Order ID: {order_id_val or 'Kh√¥ng c√≥'}")
                navigate_to_postpaid_lookup_page()
                time.sleep(2)
                update_database_immediately(order_id_val, cbil, "processing", None, f"ƒêang x·ª≠ l√Ω {cbil}", None)

                try:
                    phonenum = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
                    phonenum.clear()
                    phonenum.send_keys(cbil)
                    phonenum.send_keys(Keys.TAB)
                    time.sleep(1)
                except:
                    time.sleep(2)
                    phonenum = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
                    phonenum.clear()
                    phonenum.send_keys(cbil)
                    phonenum.send_keys(Keys.TAB)
                try:
                    try:
                        cfm_modalTT = WebDriverWait(driver, 2).until(EC.presence_of_element_located((By.ID, "indexForm:dlgConfirmTT_modal")))
                        driver.execute_script("arguments[0].style.zIndex = '-99';", cfm_modalTT)
                    except:
                        pass
                    try:
                        time.sleep(0.5)
                        spl_lbl = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:supplier")))
                        spl_lbl.click()
                        time.sleep(0.5)
                        spl_1 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:supplier_1")))
                        spl_1.click()
                        time.sleep(0.5)
                        cfm_pay = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:yesTTId")))
                        cfm_pay.click()
                        time.sleep(0.5)
                    except:
                        pass
                    try:
                        btn_check = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:btnCheck")))
                        btn_check.click()
                    except:
                        pass

                    # Ch·ªù modal/ti·∫øn tr√¨nh, r·ªìi ki·ªÉm tra th√¥ng b√°o
                    time.sleep(1)
                    
                    # Ki·ªÉm tra th√¥ng b√°o l·ªói tr∆∞·ªõc
                    # Ch·ªù alert xu·∫•t hi·ªán
                    error_text = get_error_alert_text()
                    if error_text:
                        print(f"   ‚ùå Thanh to√°n th·∫•t b·∫°i (alert): {error_text}")
                        note_text = f"Postpaid payment failed - {cbil} | {error_text}"
                        data_rows.append([cbil, 0, note_text])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - L·ªói: {error_text}")
                        if order_id_val:
                            update_database_immediately(order_id_val, cbil, "failed", None, note_text, None)
                        continue  # sang m√£ ti·∫øp theo
                    
                    # Ki·ªÉm tra th√¥ng b√°o info
                    info_text = get_info_alert_text()
                    if info_text and ("kh√¥ng c√≤n n·ª£ c∆∞·ªõc" in info_text.lower()):
                        print(f"   ‚ÑπÔ∏è  C√≥ th√¥ng b√°o info: {info_text}")
                        print(f"   ‚úÖ Kh√¥ng c√≤n n·ª£ c∆∞·ªõc: Amount = 0")
                        
                        note_text = info_text.strip()
                        data_rows.append([cbil, 0, Config.STATUS_COMPLETE])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - 0 | {note_text}")
                        
                        # C·∫≠p nh·∫≠t DB success v·ªõi amount=0 v√† notes
                        if order_id_val:
                            try:
                                notes_db = f"Postpaid: Kh√¥ng n·ª£ c∆∞·ªõc - {cbil} | {note_text}"
                                _ = update_database_immediately(order_id_val, cbil, "success", 0, notes_db, None)
                                print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (kh√¥ng n·ª£ c∆∞·ªõc)")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (Postpaid no debt) cho {cbil}: {_e}")
                        else:
                            print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                        
                        continue

                    # L·∫•y gi√° tr·ªã n·ª£ c∆∞·ªõc n·∫øu c√≥
                    try:
                        lbl_debt = WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.ID, "indexForm:debtId_input")))
                        debt_str = lbl_debt.get_attribute('value')
                        debt = int(debt_str.replace(".", "").replace(",", ""))
                        
                        print(f"   üí∞ C√≥ n·ª£ c∆∞·ªõc: {debt:,}ƒë")
                        data_rows.append([cbil, debt, Config.STATUS_COMPLETE])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - {debt:,}ƒë")
                        
                        # C·∫≠p nh·∫≠t DB success v·ªõi amount=debt
                        if order_id_val:
                            try:
                                notes_db = f"Postpaid: C√≥ n·ª£ c∆∞·ªõc - {cbil} | S·ªë ti·ªÅn: {debt:,}ƒë"
                                _ = update_database_immediately(order_id_val, cbil, "success", debt, notes_db, None)
                                print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (c√≥ n·ª£ c∆∞·ªõc)")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (Postpaid debt) cho {cbil}: {_e}")
                        else:
                            print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                        
                        continue
                    except Exception as debt_error:
                        print(f"   ‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y th√¥ng tin n·ª£ c∆∞·ªõc: {debt_error}")
                        data_rows.append([cbil, "L·ªói", Config.STATUS_INCOMPLETE])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - L·ªói | Kh√¥ng th·ªÉ l·∫•y n·ª£ c∆∞·ªõc")
                        
                        # C·∫≠p nh·∫≠t DB failed
                        if order_id_val:
                            try:
                                notes_db = f"Postpaid: L·ªói l·∫•y n·ª£ c∆∞·ªõc - {cbil} | {str(debt_error)}"
                                _ = update_database_immediately(order_id_val, cbil, "failed", None, notes_db, None)
                                print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (failed)")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (Postpaid failed) cho {cbil}: {_e}")
                        else:
                            print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                        
                        continue
                except Exception as general_error:
                    print(f"   ‚ùå L·ªói x·ª≠ l√Ω chung: {general_error}")
                    
                    # N·∫øu c√≥ th√¥ng b√°o info/alert kh√°c th√¨ l∆∞u notes gi·ªëng hi·ªÉn th·ªã
                    note_text = get_info_alert_text() or get_error_alert_text() or ""
                    if note_text:
                        print(f"   ‚ÑπÔ∏è  Th√¥ng b√°o h·ªá th·ªëng: {note_text}")
                    
                    data_rows.append([cbil, "L·ªói x·ª≠ l√Ω", Config.STATUS_INCOMPLETE])
                    display_line = f"{cbil} - L·ªói x·ª≠ l√Ω{(' | ' + note_text) if note_text else ''}"
                    insert_ctmed(tkinp_ctmed, display_line)
                    
                    # C·∫≠p nh·∫≠t DB failed v·ªõi notes gi·ªëng hi·ªÉn th·ªã
                    if order_id_val:
                        try:
                            notes_db = f"Postpaid: L·ªói x·ª≠ l√Ω - {cbil} | {str(general_error)}{(' | ' + note_text) if note_text else ''}"
                            _ = update_database_immediately(order_id_val, cbil, "failed", None, notes_db, None)
                            print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (failed)")
                        except Exception as _e:
                            logger.warning(f"DB update l·ªói (Postpaid failed) cho {cbil}: {_e}")
                    else:
                        print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                    
                    continue
        time.sleep(2)
        if len(data_rows) > 0:
            name_dir = "Tra c·ª©u n·ª£ tr·∫£ sau"
            export_excel(data_rows, name_dir)
    except Exception as e:
        logger.error(f"L·ªói tra c·ª©u n·ª£ tr·∫£ sau: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói tra c·ª©u n·ª£ tr·∫£ sau: {e}")

def form_lookup_card():
    cus_frm = tk.Frame(get_root())
    cus_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    ctm_frm = tk.Frame(cus_frm)
    ctm_frm.pack(expand=True, side="left")
    ctmed_frm = tk.Frame(cus_frm)
    ctmed_frm.pack(expand=True, side="right")
    button_frm = tk.Frame(get_root())
    button_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    tklbl_ctm = tk.Label(ctm_frm, text="SƒêT tra c·ª©u")
    tklbl_ctm.pack(side="top")
    tkinp_ctm = tk.Text(ctm_frm, height=16, width=24)
    tkinp_ctm.pack(side="left", pady=8)
    tklbl_ctm = tk.Label(ctmed_frm, text="ƒê√£ x·ª≠ l√Ω")
    tklbl_ctm.pack(side="top")
    tkinp_ctmed = tk.Text(ctmed_frm, height=16, width=32, bg="#ccc", state="disabled")
    tkinp_ctmed.pack(side="left", pady=8)
    style = ttk.Style()
    style.configure("Red.TButton", foreground="red")
    style.configure("Blue.TButton", foreground="blue")
    style.configure("Green.TButton", foreground="green")
    tkbtn_get_data = ttk.Button(button_frm, text="Get d·ªØ li·ªáu", command=lambda: get_data_postpaid(tkinp_ctm))
    tkbtn_get_data.pack(side='left', padx=5, pady=5)
    tkbtn_get_data.configure(style="Green.TButton")
    tkbtn_payment = ttk.Button(button_frm, text="B·∫Øt ƒë·∫ßu", command=lambda: lookup_card(tkinp_ctm, tkinp_ctmed))
    tkbtn_payment.pack(side='left', padx=5, pady=5)
    tkbtn_payment.configure(style="Blue.TButton") 
    tkbtn_destroy = ttk.Button(button_frm, text="D·ª´ng l·∫°i", command=stop_tool)
    tkbtn_destroy.pack(side='right', padx=5, pady=5)
    tkbtn_destroy.configure(style="Red.TButton") 

