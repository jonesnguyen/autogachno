"""Topup multi-network service module"""

import logging
from typing import List, Optional, Dict, Any
import tkinter as tk
from tkinter import ttk, messagebox
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

from ..config import Config
from ..db import update_database_immediately, db_find_order_id, db_fetch_service_data
from ..utils.browser import driver, ensure_driver_and_login, automation_lock, get_error_alert_text, get_info_alert_text
from ..utils.ui_helpers import (
    populate_text_widget,
    populate_entry_widget,
    populate_combobox_widget,
    insert_ctmed,
    delete_ctmed,
    valid_data,
    stop_flag,
    get_root,
    maybe_update_ui,
    update_stop_flag,
    stop_tool,
)
from ..utils.api_client import fetch_api_data
from ..utils.excel_export import export_excel

logger = logging.getLogger(__name__)

# Bi·∫øn global ƒë·ªÉ l∆∞u Order ID hi·ªán t·∫°i
current_order_id = None
stt_complete = "ƒê√£ x·ª≠ l√Ω"
stt_incomplete = "Ch∆∞a x·ª≠ l√Ω"

def handle_choose_amount(am: str) -> str:
    try:
        amount_map = {
            "10.000ƒë": "0",
            "20.000ƒë": "1",
            "30.000ƒë": "2",
            "50.000ƒë": "3",
            "100.000ƒë": "4",
            "200.000ƒë": "5",
            "300.000ƒë": "6",
            "500.000ƒë": "7",
        }
        return amount_map.get(am, "0")
    except Exception:
        return "0"

def get_data_viettel(text_widget, pin_widget):
    """L·∫•y d·ªØ li·ªáu API cho N·∫°p ti·ªÅn ƒëa m·∫°ng"""
    try:
        data = fetch_api_data("nap_tien_viettel")
        print("N·∫°p ti·ªÅn Viettel:")
        print(data)
        if data and "subscriber_codes" in data:
            codes = [c.strip() for c in data.get("subscriber_codes", [])]
            
            # Gh√©p code|order_id t·ª´ code_order_map
            code_order_map = data.get("code_order_map", [])
            display_codes = []
            for m in code_order_map:
                code_clean = (m.get("code") or "").strip()
                oid = m.get("orderId") or ""
                display_codes.append(f"{code_clean}|{oid}")
            populate_text_widget(text_widget, display_codes)
            populate_entry_widget(pin_widget, Config.DEFAULT_PIN)
            # D√πng code_order_map thay v√¨ ch·ªâ l·∫•y latest order_id
            map_texts = []
            for m in code_order_map:
                code_clean = (m.get("code") or "").strip()
                oid = m.get("orderId")
                map_texts.append(f"{code_clean}: {oid if oid else 'Kh√¥ng c√≥'}")
    
            info_msg = f"ƒê√£ t·∫£i {len(codes)} m√£ thu√™ bao Postpaid\n"
            info_msg += "\n".join(map_texts)
    
            #messagebox.showinfo(Config.TITLE, info_msg)
        else:
            pass  # Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ DB

    except Exception as e:
        logger.error(f"L·ªói l·∫•y d·ªØ li·ªáu Postpaid: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói l·∫•y d·ªØ li·ªáu Postpaid: {e}")

def navigate_to_topup_multinetwork_page():
    """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang n·∫°p ti·ªÅn ƒëa m·∫°ng."""
    try:
        
        target_url = "https://kpp.bankplus.vn/pages/chargecard.jsf"
        driver.get(target_url)
        driver.refresh()
        
        time.sleep(2)
        # Ch·ªù input s·ªë ƒëi·ªán tho·∫°i xu·∫•t hi·ªán
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
        time.sleep(2)
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng Topup ƒëa m·∫°ng: {e}")
        raise

def toggle_input_amount(select, label, combobox):
    selected_value = select.get()
    if selected_value == "N·∫°p tr·∫£ tr∆∞·ªõc":
        # ·∫®n combobox s·ªë ti·ªÅn cho "N·∫°p tr·∫£ tr∆∞·ªõc" v√¨ s·ªë ti·ªÅn ƒë√£ c√≥ trong format sƒët|s·ªë ti·ªÅn
        combobox.pack_forget()
        label.pack_forget()
    else:
        # Hi·ªÉn th·ªã combobox s·ªë ti·ªÅn cho "G·∫°ch n·ª£ tr·∫£ sau"
        combobox.pack(side="right")
        label.pack(side="right")
    maybe_update_ui()

def handle_choose_select(choose: str) -> int:
    """X·ª≠ l√Ω l·ª±a ch·ªçn lo·∫°i thanh to√°n"""
    try:
        choose = choose.strip()
        if choose == "N·∫°p tr·∫£ tr∆∞·ªõc":
            return 1
        else:
            return 2
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω lo·∫°i thanh to√°n: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói x·ª≠ l√Ω lo·∫°i thanh to√°n: {e}")
        return 1

def payment_viettel(tkinp_ctm, tkinp_ctmed, tkinp_pin):
    try:
        delete_ctmed(tkinp_ctmed)
        update_stop_flag()
        cbils = tkinp_ctm.get("1.0", "end-1c").splitlines()
        pin = tkinp_pin.get()

        if not valid_data([cbils, pin]):
            return False

        data_rows = []
        for raw in cbils:
            maybe_update_ui()
            time.sleep(1)
            raw = (raw or "").strip()
            if not raw:
                continue

            cbil, amount, order_id_val = raw.split("|")
            cbil = cbil.strip()
            amount = amount.strip()
            order_id_val = order_id_val.strip()
            rsl_amount = handle_choose_amount(amount)
            print(f"sdt: {cbil}, amount: {amount}, order_id: {order_id_val}")


            if not stop_flag and cbil.strip() != "":
                print(f"   üîß ƒêang x·ª≠ l√Ω {cbil} | Order ID: {order_id_val or 'Kh√¥ng c√≥'}")
                update_database_immediately(order_id_val, cbil, "processing", None, f"ƒêang x·ª≠ l√Ω {cbil}", None)
                navigate_to_topup_multinetwork_page()
                time.sleep(3)
                phonenum = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
                phonenum.clear()
                phonenum.send_keys(cbil)
                phonenum.send_keys(Keys.TAB)
                time.sleep(1)

                try:
                    cfm_modalTT = WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.ID, "indexForm:dlgConfirmTT_modal")))
                    driver.execute_script("arguments[0].style.zIndex = '-99';", cfm_modalTT)
                    time.sleep(1)
                    spl_lbl = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:supplier")))
                    spl_lbl.click()
                    time.sleep(0.5)
                    spl_0 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:supplier_0")))
                    spl_0.click()
                    time.sleep(0.5)
                    cfm_pay = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:yesTTId")))
                    cfm_pay.click()
                except:
                    pass

                try:
                    inp_amount = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:transAmountId_input")))
                    inp_amount.clear()
                    inp_amount.send_keys(amount)
                    time.sleep(0.5)
                    pin_id = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:pinId")))
                    pin_id.clear()
                    pin_id.send_keys(pin)
                    btn_pay = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:btnPay")))
                    btn_pay.click()
                    time.sleep(0.5)
                    try:
                        cfm_modal = WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.ID, "indexForm:dlgConfirm_modal")))
                        driver.execute_script("arguments[0].style.zIndex = '-99';", cfm_modal)
                    except:
                        pass
                    time.sleep(0.5)
                    btn_confirm = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:yesIdCard")))
                    btn_confirm.click()

                    time.sleep(2.5)
                    # Ch·ªù alert xu·∫•t hi·ªán
                    error_text = get_error_alert_text()
                    if error_text:
                        print(f"   ‚ùå Thanh to√°n th·∫•t b·∫°i (alert): {error_text}")
                        note_text = f"N·∫°p ti·ªÅn ƒëa m·∫°ng payment failed - {cbil} | {error_text}"
                        data_rows.append([cbil, 0, note_text])
                        data_rows.append([cbil, amount, stt_complete])
                        tkinp_ctm.delete("1.0", "1.end+1c")
                        insert_ctmed(tkinp_ctmed, f"{cbil} - {amount} - L·ªói: {error_text}")       
                        if order_id_val:
                            update_database_immediately(order_id_val, cbil, "failed", None, note_text, None)
                        continue  # sang m√£ ti·∫øp theo
                    
                    # Ki·ªÉm tra th√¥ng b√°o info
                    info_text = get_info_alert_text()
                    if info_text or ("kh√¥ng c√≤n n·ª£ c∆∞·ªõc" in info_text.lower()):
                        print(f"   ‚ÑπÔ∏è  C√≥ th√¥ng b√°o info: {info_text}")
                        print(f"   ‚úÖ Kh√¥ng c√≤n n·ª£ c∆∞·ªõc: Amount = 0")
                        
                        note_text = info_text.strip()
                        data_rows.append([cbil, amount, stt_complete])
                        tkinp_ctm.delete("1.0", "1.end+1c")
                        insert_ctmed(tkinp_ctmed, f"{cbil} - {amount} | {note_text}")   
                        _ = update_database_immediately(order_id_val, cbil, "success", 0, note_text, None) 
                        continue
                    else:
                        data_rows.append([cbil, amount, stt_complete])
                        tkinp_ctm.delete("1.0", "1.end+1c")
                        insert_ctmed(tkinp_ctmed, f"{cbil} - {amount}")
                        _ = update_database_immediately(order_id_val, cbil, "success", 0, None, None)    
                except:
                    data_rows.append([cbil, 0, stt_incomplete])
                    _ = update_database_immediately(order_id_val, cbil, "failed", None, None, None) 
                    tkinp_ctm.delete("1.0", "1.end+1c")
                    insert_ctmed(tkinp_ctmed, f"{cbil} - {amount}")       

        time.sleep(2)
        if len(data_rows) > 0:
            name_dir = "N·∫°p ti·ªÅn viettel"
            export_excel(data_rows, name_dir)
    except Exception as e:
        logger.error(f"L·ªói thanh to√°n ƒëi·ªán tho·∫°i: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói thanh to√°n ƒëi·ªán tho·∫°i: {e}")

def form_payment_viettel():
    r = get_root()
    cus_frm = tk.Frame(r)
    cus_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    ctm_frm = tk.Frame(cus_frm)
    ctm_frm.pack(expand=True, side="left")
    ctmed_frm = tk.Frame(cus_frm)
    ctmed_frm.pack(expand=True, side="right")
    form_frm = tk.Frame(r)
    form_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    pin_frm = tk.Frame(r)
    pin_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    button_frm = tk.Frame(r)
    button_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    tklbl_ctm = tk.Label(ctm_frm, text="S·ªë ƒëi·ªán tho·∫°i")
    tklbl_ctm.pack(side="top")
    tkinp_ctm = tk.Text(ctm_frm, height=12, width=24)
    tkinp_ctm.pack(side="left", pady=8)
    tklbl_ctm = tk.Label(ctmed_frm, text="ƒê√£ x·ª≠ l√Ω")
    tklbl_ctm.pack(side="top")
    tkinp_ctmed = tk.Text(ctmed_frm, width=32, height=12, bg="#ccc", state="disabled")
    tkinp_ctmed.pack(side="left", pady=8)
    tklbl_pin = tk.Label(pin_frm, text="M√£ pin:")
    tklbl_pin.pack(side="left")
    tkinp_pin = ttk.Entry(pin_frm, width=12)
    tkinp_pin.pack(side="left", padx=4)
    style = ttk.Style()
    style.configure("Red.TButton", foreground="red")
    style.configure("Blue.TButton", foreground="blue")
    style.configure("Green.TButton", foreground="green")
    tkbtn_get_data = ttk.Button(button_frm, text="Get d·ªØ li·ªáu", command=lambda: get_data_viettel(tkinp_ctm, tkinp_pin))
    tkbtn_get_data.pack(side='left', padx=5, pady=5)
    tkbtn_get_data.configure(style="Green.TButton")
    tkbtn_payment = ttk.Button(button_frm, text="B·∫Øt ƒë·∫ßu", command=lambda: payment_viettel(tkinp_ctm, tkinp_ctmed, tkinp_pin))
    tkbtn_payment.pack(side='left', padx=5, pady=5)
    tkbtn_payment.configure(style="Blue.TButton") 
    tkbtn_destroy = ttk.Button(button_frm, text="D·ª´ng l·∫°i", command=stop_tool)
    tkbtn_destroy.pack(side='right', padx=5, pady=5)
    tkbtn_destroy.configure(style="Red.TButton") 
