"""Postpaid lookup service module"""

import logging
from typing import List, Optional
import tkinter as tk
from tkinter import ttk, #messagebox
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

from ..config import Config
from ..db import update_database_immediately, db_find_order_id
from ..utils.browser import driver, ensure_driver_and_login, automation_lock, get_info_alert_text, get_error_alert_text
from ..utils.ui_helpers import (
    populate_text_widget,
    insert_ctmed,
    delete_ctmed,
    valid_data,
    stop_flag,
    get_root,
    update_stop_flag,
    stop_tool,
)
from ..utils.excel_export import export_excel
from ..utils.api_client import fetch_api_data

# Import amount_by_cbil function
try:
    from ..utils.ui_helpers import amount_by_cbil
except ImportError:
    # Fallback n·∫øu kh√¥ng import ƒë∆∞·ª£c
    def amount_by_cbil(cbil, element, lookup=False):
        try:
            amount_text = element.text.strip()
            if amount_text and amount_text.replace(".", "").replace(",", "").isdigit():
                amount = int(amount_text.replace(".", "").replace(",", ""))
                return True, amount, None
            return False, 0, None
        except:
            return False, 0, None

logger = logging.getLogger(__name__)

def process_postpaid_lookup_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω tra c·ª©u tr·∫£ sau kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Postpaid cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang Postpaid...")
            navigate_to_postpaid_lookup_page()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang Postpaid")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(3):  # Retry t·ªëi ƒëa 3 l·∫ßn
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/3 cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_postpaid_lookup_page()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        get_root().update() if 'get_root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn m√£ thu√™ bao: {cbil}")
                        customer = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:contractCode")))
                        customer.clear()
                        customer.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t KI·ªÇM TRA...")
                        payment_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:btnPay0")))
                        payment_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   üìä L·∫•y th√¥ng tin k·∫øt qu·∫£...")
                        
                        # Ki·ªÉm tra th√¥ng b√°o l·ªói tr∆∞·ªõc
                        error_text = get_error_alert_text()
                        if error_text:
                            print(f"   ‚ùå C√≥ th√¥ng b√°o l·ªói: {error_text}")
                            if "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" in error_text:
                                print(f"   üîç L·ªói validation: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc")
                                print(f"   üí° Ki·ªÉm tra: M√£ thu√™ bao '{cbil}' c√≥ h·ª£p l·ªá kh√¥ng?")
                            
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": error_text})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, f"L·ªói: {error_text}", None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                            
                            break
                        
                        # Ki·ªÉm tra th√¥ng b√°o info
                        info_text = get_info_alert_text()
                        if info_text:
                            print(f"   ‚ÑπÔ∏è  C√≥ th√¥ng b√°o info: {info_text}")
                            if "kh√¥ng c√≤n n·ª£ c∆∞·ªõc" in info_text.lower():
                                print(f"   ‚úÖ Kh√¥ng c√≤n n·ª£ c∆∞·ªõc: Amount = 0")
                                amount = 0
                                success = True
                                results.append({"code": cbil, "amount": amount, "status": "success", "message": info_text})
                                
                                # Update database cho tr∆∞·ªùng h·ª£p kh√¥ng n·ª£ c∆∞·ªõc
                                if order_id:
                                    print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p kh√¥ng n·ª£ c∆∞·ªõc...")
                                    notes = f"Postpaid: Kh√¥ng n·ª£ c∆∞·ªõc - {cbil} | {info_text}"
                                    db_success = update_database_immediately(order_id, cbil, "success", amount, notes, None)
                                    if not db_success:
                                        logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                                else:
                                    print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                                
                                print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                                break
                        
                        # Th·ª≠ l·∫•y th√¥ng tin t·ª´ element
                        try:
                            element41 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:j_idt41")))
                            _is_amount, amount, _pid = amount_by_cbil(cbil, element41, False)
                            
                            if _is_amount and amount > 0:
                                print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: Amount = {amount:,}ƒë")
                                
                                # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                                success = True
                                results.append({"code": cbil, "amount": amount, "status": "success"})
                                
                                # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                                if order_id:
                                    print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                                    notes = f"Postpaid: C√≥ n·ª£ c∆∞·ªõc - {cbil} | S·ªë ti·ªÅn: {amount:,}ƒë"
                                    db_success = update_database_immediately(order_id, cbil, "success", amount, notes, None)
                                    if not db_success:
                                        logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                                else:
                                    print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                                
                                print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                                break
                            else:
                                print(f"   ‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·ªë ti·ªÅn t·ª´ element")
                                results.append({"code": cbil, "amount": None, "status": "failed", "message": "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·ªë ti·ªÅn"})
                        except Exception as element_error:
                            print(f"   ‚ö†Ô∏è  Kh√¥ng th·ªÉ t√¨m th·∫•y element: {element_error}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": f"Kh√¥ng th·ªÉ t√¨m th·∫•y element: {element_error}"})
                        
                        # N·∫øu ƒë·∫øn ƒë√¢y m√† ch∆∞a th√†nh c√¥ng, coi nh∆∞ th·∫•t b·∫°i
                        print(f"   ‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω m√£ {cbil} - kh√¥ng c√≥ k·∫øt qu·∫£ r√µ r√†ng")
                        results.append({"code": cbil, "amount": None, "status": "failed", "message": "Kh√¥ng c√≥ k·∫øt qu·∫£ r√µ r√†ng"})
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < 2:  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"Postpaid code {cbil} th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω Postpaid:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"Postpaid processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_postpaid_lookup_codes error: {e}")


def get_data_postpaid(text_widget):
    """L·∫•y d·ªØ li·ªáu API cho Tra c·ª©u n·ª£ thu√™ bao tr·∫£ sau"""
    try:
        data = fetch_api_data("tra_cuu_no_tra_sau")
        if data and "phone_numbers" in data:
            populate_text_widget(text_widget, data["phone_numbers"])
            order_id = data.get("order_id")
            info_msg = f"ƒê√£ t·∫£i {len(data['phone_numbers'])} s·ªë ƒëi·ªán tho·∫°i tr·∫£ sau"
            if order_id:
                print(f"[INFO] Order ID t·ª´ DB: {order_id}", flush=True)
                logger.info(f"Order ID t·ª´ DB (Tr·∫£ sau): {order_id}")
                info_msg += f"\nOrder ID: {order_id}"
            #messagebox.showinfo(Config.TITLE, info_msg)
        else:
            #messagebox.showwarning(Config.TITLE, "Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API")
    except Exception as e:
        logger.error(f"L·ªói l·∫•y d·ªØ li·ªáu tr·∫£ sau: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói l·∫•y d·ªØ li·ªáu tr·∫£ sau: {e}")


def navigate_to_postpaid_lookup_page():
    """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang tra c·ª©u tr·∫£ sau."""
    try:
        target_url = "https://kpp.bankplus.vn/pages/chargecard.jsf"
        driver.get(target_url)
        # Ch·ªù input m√£ thu√™ bao xu·∫•t hi·ªán
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
        time.sleep(2)
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng Postpaid: {e}")
        raise


def lookup_card(tkinp_ctm, tkinp_ctmed):
    try:
        delete_ctmed(tkinp_ctmed)
        update_stop_flag()
        cbils = tkinp_ctm.get("1.0", "end-1c").splitlines()
        if not valid_data([cbils]):
            #messagebox.showwarning(Config.TITLE, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
            return False
        
        # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        print(f"üîç [VALIDATION] Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o:")
        print(f"   üì± S·ªë l∆∞·ª£ng m√£: {len(cbils)}")
        for i, cbil in enumerate(cbils):
            if cbil.strip():
                print(f"   üìã M√£ {i+1}: '{cbil.strip()}'")
            else:
                print(f"   ‚ö†Ô∏è  M√£ {i+1}: R·ªóng (s·∫Ω b·ªè qua)")
        
        print(f"   üí° Strategy: M·ªói d√≤ng = 1 ƒë∆°n h√†ng ri√™ng bi·ªát")
        data = []
        for idx, cbil in enumerate(cbils, 1):
            cbil = cbil.strip()
            if not cbil:  # B·ªè qua d√≤ng r·ªóng
                print(f"   ‚è≠Ô∏è  B·ªè qua d√≤ng {idx}: R·ªóng")
                continue
                
            print(f"\nüì± [M√É {idx}/{len(cbils)}] X·ª≠ l√Ω m√£: {cbil}")
            
            # T√¨m Order ID ri√™ng cho t·ª´ng m√£ (nh∆∞ FTTH)
            order_id_val = db_find_order_id('tra_cuu_no_tra_sau', cbil, None)
            if order_id_val:
                print(f"   üìã Order ID ri√™ng: {order_id_val}")
            else:
                print(f"   ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y Order ID cho {cbil}")
            
            get_root().update()
            time.sleep(1)
            if not stop_flag:
                # ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang tra c·ª©u tr·∫£ sau tr∆∞·ªõc khi x·ª≠ l√Ω
                navigate_to_postpaid_lookup_page()
                time.sleep(2)
                try:
                    phonenum = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
                    phonenum.clear()
                    phonenum.send_keys(cbil)
                    phonenum.send_keys(Keys.TAB)
                    time.sleep(1)
                except:
                    time.sleep(2)
                    phonenum = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:phoneNumberId")))
                    phonenum.clear()
                    phonenum.send_keys(cbil)
                    phonenum.send_keys(Keys.TAB)
                try:
                    try:
                        cfm_modalTT = WebDriverWait(driver, 2).until(EC.presence_of_element_located((By.ID, "indexForm:dlgConfirmTT_modal")))
                        driver.execute_script("arguments[0].style.zIndex = '-99';", cfm_modalTT)
                    except:
                        pass
                    try:
                        time.sleep(0.5)
                        spl_lbl = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:supplier")))
                        spl_lbl.click()
                        time.sleep(0.5)
                        spl_1 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:supplier_1")))
                        spl_1.click()
                        time.sleep(0.5)
                        cfm_pay = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:yesTTId")))
                        cfm_pay.click()
                        time.sleep(0.5)
                    except:
                        pass
                    try:
                        btn_check = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "indexForm:btnCheck")))
                        btn_check.click()
                    except:
                        pass

                    # Ch·ªù modal/ti·∫øn tr√¨nh, r·ªìi ki·ªÉm tra th√¥ng b√°o
                    time.sleep(1)
                    
                    # Ki·ªÉm tra th√¥ng b√°o l·ªói tr∆∞·ªõc
                    error_text = get_error_alert_text()
                    if error_text:
                        print(f"   ‚ùå C√≥ th√¥ng b√°o l·ªói: {error_text}")
                        if "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" in error_text:
                            print(f"   üîç L·ªói validation: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc")
                            print(f"   üí° Ki·ªÉm tra: M√£ thu√™ bao '{cbil}' c√≥ h·ª£p l·ªá kh√¥ng?")
                        
                        note_text = error_text.strip()
                        data.append([cbil, "L·ªói", Config.STATUS_INCOMPLETE])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - L·ªói | {note_text}")
                        
                        # C·∫≠p nh·∫≠t DB failed v·ªõi notes
                        if order_id_val:
                            try:
                                notes_db = f"Postpaid: L·ªói - {cbil} | {note_text}"
                                _ = update_database_immediately(order_id_val, cbil, "failed", None, notes_db, None)
                                print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (failed)")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (Postpaid failed) cho {cbil}: {_e}")
                        else:
                            print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                        
                        continue
                    
                    # Ki·ªÉm tra th√¥ng b√°o info
                    info_text = get_info_alert_text()
                    if info_text and ("kh√¥ng c√≤n n·ª£ c∆∞·ªõc" in info_text.lower()):
                        print(f"   ‚ÑπÔ∏è  C√≥ th√¥ng b√°o info: {info_text}")
                        print(f"   ‚úÖ Kh√¥ng c√≤n n·ª£ c∆∞·ªõc: Amount = 0")
                        
                        note_text = info_text.strip()
                        data.append([cbil, 0, Config.STATUS_COMPLETE])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - 0 | {note_text}")
                        
                        # C·∫≠p nh·∫≠t DB success v·ªõi amount=0 v√† notes
                        if order_id_val:
                            try:
                                notes_db = f"Postpaid: Kh√¥ng n·ª£ c∆∞·ªõc - {cbil} | {note_text}"
                                _ = update_database_immediately(order_id_val, cbil, "success", 0, notes_db, None)
                                print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (kh√¥ng n·ª£ c∆∞·ªõc)")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (Postpaid no debt) cho {cbil}: {_e}")
                        else:
                            print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                        
                        continue

                    # L·∫•y gi√° tr·ªã n·ª£ c∆∞·ªõc n·∫øu c√≥
                    try:
                        lbl_debt = WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.ID, "indexForm:debtId_input")))
                        debt_str = lbl_debt.get_attribute('value')
                        debt = int(debt_str.replace(".", "").replace(",", ""))
                        
                        print(f"   üí∞ C√≥ n·ª£ c∆∞·ªõc: {debt:,}ƒë")
                        data.append([cbil, debt, Config.STATUS_COMPLETE])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - {debt:,}ƒë")
                        
                        # C·∫≠p nh·∫≠t DB success v·ªõi amount=debt
                        if order_id_val:
                            try:
                                notes_db = f"Postpaid: C√≥ n·ª£ c∆∞·ªõc - {cbil} | S·ªë ti·ªÅn: {debt:,}ƒë"
                                _ = update_database_immediately(order_id_val, cbil, "success", debt, notes_db, None)
                                print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (c√≥ n·ª£ c∆∞·ªõc)")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (Postpaid debt) cho {cbil}: {_e}")
                        else:
                            print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                        
                        continue
                    except Exception as debt_error:
                        print(f"   ‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y th√¥ng tin n·ª£ c∆∞·ªõc: {debt_error}")
                        data.append([cbil, "L·ªói", Config.STATUS_INCOMPLETE])
                        insert_ctmed(tkinp_ctmed, f"{cbil} - L·ªói | Kh√¥ng th·ªÉ l·∫•y n·ª£ c∆∞·ªõc")
                        
                        # C·∫≠p nh·∫≠t DB failed
                        if order_id_val:
                            try:
                                notes_db = f"Postpaid: L·ªói l·∫•y n·ª£ c∆∞·ªõc - {cbil} | {str(debt_error)}"
                                _ = update_database_immediately(order_id_val, cbil, "failed", None, notes_db, None)
                                print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (failed)")
                            except Exception as _e:
                                logger.warning(f"DB update l·ªói (Postpaid failed) cho {cbil}: {_e}")
                        else:
                            print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                        
                        continue
                except Exception as general_error:
                    print(f"   ‚ùå L·ªói x·ª≠ l√Ω chung: {general_error}")
                    
                    # N·∫øu c√≥ th√¥ng b√°o info/alert kh√°c th√¨ l∆∞u notes gi·ªëng hi·ªÉn th·ªã
                    note_text = get_info_alert_text() or get_error_alert_text() or ""
                    if note_text:
                        print(f"   ‚ÑπÔ∏è  Th√¥ng b√°o h·ªá th·ªëng: {note_text}")
                    
                    data.append([cbil, "L·ªói x·ª≠ l√Ω", Config.STATUS_INCOMPLETE])
                    display_line = f"{cbil} - L·ªói x·ª≠ l√Ω{(' | ' + note_text) if note_text else ''}"
                    insert_ctmed(tkinp_ctmed, display_line)
                    
                    # C·∫≠p nh·∫≠t DB failed v·ªõi notes gi·ªëng hi·ªÉn th·ªã
                    if order_id_val:
                        try:
                            notes_db = f"Postpaid: L·ªói x·ª≠ l√Ω - {cbil} | {str(general_error)}{(' | ' + note_text) if note_text else ''}"
                            _ = update_database_immediately(order_id_val, cbil, "failed", None, notes_db, None)
                            print(f"      ‚úÖ Database update th√†nh c√¥ng cho {cbil} (failed)")
                        except Exception as _e:
                            logger.warning(f"DB update l·ªói (Postpaid failed) cho {cbil}: {_e}")
                    else:
                        print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ Order ID cho {cbil} - b·ªè qua database update")
                    
                    continue
        time.sleep(2)
        if len(data) > 0:
            name_dir = "Tra c·ª©u n·ª£ tr·∫£ sau"
            export_excel(data, name_dir)
    except Exception as e:
        logger.error(f"L·ªói tra c·ª©u n·ª£ tr·∫£ sau: {e}")
        #messagebox.showerror(Config.TITLE, f"L·ªói tra c·ª©u n·ª£ tr·∫£ sau: {e}")

def form_lookup_card():
    cus_frm = tk.Frame(get_root())
    cus_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    ctm_frm = tk.Frame(cus_frm)
    ctm_frm.pack(expand=True, side="left")
    ctmed_frm = tk.Frame(cus_frm)
    ctmed_frm.pack(expand=True, side="right")
    button_frm = tk.Frame(get_root())
    button_frm.pack(expand=True, side="top", padx=14, pady=8, fill="both")
    tklbl_ctm = tk.Label(ctm_frm, text="SƒêT tra c·ª©u")
    tklbl_ctm.pack(side="top")
    tkinp_ctm = tk.Text(ctm_frm, height=16, width=24)
    tkinp_ctm.pack(side="left", pady=8)
    tklbl_ctm = tk.Label(ctmed_frm, text="ƒê√£ x·ª≠ l√Ω")
    tklbl_ctm.pack(side="top")
    tkinp_ctmed = tk.Text(ctmed_frm, height=16, width=32, bg="#ccc", state="disabled")
    tkinp_ctmed.pack(side="left", pady=8)
    style = ttk.Style()
    style.configure("Red.TButton", foreground="red")
    style.configure("Blue.TButton", foreground="blue")
    style.configure("Green.TButton", foreground="green")
    tkbtn_get_data = ttk.Button(button_frm, text="Get d·ªØ li·ªáu", command=lambda: get_data_postpaid(tkinp_ctm))
    tkbtn_get_data.pack(side='left', padx=5, pady=5)
    tkbtn_get_data.configure(style="Green.TButton")
    tkbtn_payment = ttk.Button(button_frm, text="B·∫Øt ƒë·∫ßu", command=lambda: lookup_card(tkinp_ctm, tkinp_ctmed))
    tkbtn_payment.pack(side='left', padx=5, pady=5)
    tkbtn_payment.configure(style="Blue.TButton") 
    tkbtn_destroy = ttk.Button(button_frm, text="D·ª´ng l·∫°i", command=stop_tool)
    tkbtn_destroy.pack(side='right', padx=5, pady=5)
    tkbtn_destroy.configure(style="Red.TButton") 

