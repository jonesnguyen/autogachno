def process_lookup_ftth_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω tra c·ª©u FTTH kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω FTTH cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    
    print("   ‚úÖ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω (b·ªè qua ƒëƒÉng nh·∫≠p)")
    
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang FTTH...")
            navigate_to_ftth_page_and_select_radio()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang FTTH")
            
            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh cho t·ª´ng order n·∫øu c√≥
            if order_id:
                print("   üìã Danh s√°ch m√£ s·∫Ω x·ª≠ l√Ω:")
                for idx, cb in enumerate(codes, 1):
                    print(f"      {idx}. {cb}")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(AUTOMATION_MAX_RETRIES):  # Retry t·ªëi ƒëa c·∫•u h√¨nh
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/{AUTOMATION_MAX_RETRIES} cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_ftth_page_and_select_radio()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        root.update() if 'root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn m√£ thu√™ bao: {cbil}")
                        customer = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:contractCode")))
                        customer.clear()
                        customer.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t KI·ªÇM TRA...")
                        payment_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:btnPay0")))
                        payment_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   üìä L·∫•y th√¥ng tin k·∫øt qu·∫£...")
                        element41 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:j_idt41")))
                        _is_amount, amount, _pid = amount_by_cbil(cbil, element41, False)
                        details = extract_ftth_details_from_page()
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: Amount = {amount}")
                        if details:
                            print(f"   üìã Chi ti·∫øt FTTH:")
                            for key, value in details.items():
                                print(f"      ‚Ä¢ {key}: {value}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": amount, "status": "success"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            db_success = update_database_immediately(order_id, cbil, "success", amount, "FTTH lookup ok", details)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < (AUTOMATION_MAX_RETRIES - 1):  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"FTTH code {cbil} th·∫•t b·∫°i sau {AUTOMATION_MAX_RETRIES} l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω FTTH:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"FTTH processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_lookup_ftth_codes error: {e}")

def process_evn_payment_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω thanh to√°n ƒëi·ªán EVN kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω EVN cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang EVN...")
            navigate_to_evn_page()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang EVN")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(AUTOMATION_MAX_RETRIES):  # Retry t·ªëi ƒëa theo c·∫•u h√¨nh
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/3 cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_evn_page()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        root.update() if 'root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn m√£ h√≥a ƒë∆°n: {cbil}")
                        customer = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "collectElectricBillForm:j_idt29")))
                        customer.clear()
                        customer.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t KI·ªÇM TRA...")
                        payment_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "collectElectricBillForm:j_idt31")))
                        payment_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   üìä L·∫•y th√¥ng tin k·∫øt qu·∫£...")
                        element41 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:j_idt41")))
                        _is_amount, amount, _pid = amount_by_cbil(cbil, element41, False)
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: Amount = {amount}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": amount, "status": "success"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            db_success = update_database_immediately(order_id, cbil, "success", amount, "EVN payment ok", None)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < 2:  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"EVN code {cbil} th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω EVN:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"EVN processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_evn_payment_codes error: {e}")

def process_topup_multinetwork_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω n·∫°p ti·ªÅn ƒëa m·∫°ng - h·ªó tr·ª£ c·∫£ n·∫°p tr·∫£ tr∆∞·ªõc v√† g·∫°ch n·ª£ tr·∫£ sau."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Topup ƒëa m·∫°ng cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang Topup ƒëa m·∫°ng...")
            navigate_to_topup_multinetwork_page()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang Topup ƒëa m·∫°ng")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                
                # Hi·ªÉn th·ªã ti·∫øn tr√¨nh t∆∞∆°ng t·ª± FTTH
                print(f"   üîÑ ƒêang x·ª≠ l√Ω {cbil} | Order ID: {order_id or 'Kh√¥ng c√≥'}")
                print(f"   üìç Lo·∫°i d·ªãch v·ª•: {'N·∫°p tr·∫£ tr∆∞·ªõc' if '|' in cbil else 'G·∫°ch n·ª£ tr·∫£ sau'}")
                
                # Ph√¢n t√≠ch d·ªØ li·ªáu ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i d·ªãch v·ª•
                is_prepaid = '|' in cbil  # N·∫°p tr·∫£ tr∆∞·ªõc: c√≥ d·∫•u | (sƒët|s·ªë ti·ªÅn)
                if is_prepaid:
                    # N·∫°p tr·∫£ tr∆∞·ªõc: sƒët|s·ªë ti·ªÅn
                    parts = cbil.split('|')
                    if len(parts) != 2:
                        print(f"   ‚ùå Sai ƒë·ªãnh d·∫°ng: {cbil} (c·∫ßn: sƒët|s·ªë ti·ªÅn)")
                        results.append({"code": cbil, "amount": None, "status": "failed", "message": "Sai ƒë·ªãnh d·∫°ng"})
                        continue
                    
                    phone_number = parts[0].strip()
                    amount_str = parts[1].strip()
                    try:
                        amount = int(amount_str)
                        valid_amounts = [10000, 20000, 30000, 50000, 100000, 200000, 300000, 500000]
                        if amount not in valid_amounts:
                            print(f"   ‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá: {amount} (ch·ªâ cho ph√©p: {valid_amounts})")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": f"S·ªë ti·ªÅn {amount} kh√¥ng h·ª£p l·ªá"})
                            continue
                    except ValueError:
                        print(f"   ‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá: {amount_str}")
                        results.append({"code": cbil, "amount": None, "status": "failed", "message": "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá"})
                        continue
                    
                    print(f"   üéØ N·∫°p tr·∫£ tr∆∞·ªõc: {phone_number} | S·ªë ti·ªÅn: {amount:,}ƒë")
                    process_code = phone_number
                else:
                    # G·∫°ch n·ª£ tr·∫£ sau: ch·ªâ s·ªë ƒëi·ªán tho·∫°i
                    phone_number = cbil.strip()
                    print(f"   üéØ G·∫°ch n·ª£ tr·∫£ sau: {phone_number}")
                    process_code = phone_number
                
                success = False
                for attempt in range(3):  # Retry t·ªëi ƒëa 3 l·∫ßn
                    try:
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/3 cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_topup_multinetwork_page()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        root.update() if 'root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i: {process_code}")
                        print(f"   üîÑ Ti·∫øn tr√¨nh: {cbil} - B∆∞·ªõc 1/4: ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i")
                        phone_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:phoneNumber")))
                        phone_input.clear()
                        phone_input.send_keys(process_code)
                        
                        # N·∫øu l√† n·∫°p tr·∫£ tr∆∞·ªõc, nh·∫≠p s·ªë ti·ªÅn
                        if is_prepaid:  # N·∫°p tr·∫£ tr∆∞·ªõc
                            print(f"   üîÑ Ti·∫øn tr√¨nh: {cbil} - B∆∞·ªõc 2/4: ƒêi·ªÅn s·ªë ti·ªÅn")
                            try:
                                print(f"   üí∞ ƒêi·ªÅn s·ªë ti·ªÅn: {amount:,}ƒë")
                                amount_input = WebDriverWait(driver, 10).until(
                                    EC.presence_of_element_located((By.ID, "payMoneyForm:amount"))
                                )
                                amount_input.clear()
                                amount_input.send_keys(str(amount))
                                time.sleep(1)
                            except:
                                # N·∫øu kh√¥ng t√¨m th·∫•y input s·ªë ti·ªÅn, th·ª≠ t√¨m element kh√°c
                                amount_input = WebDriverWait(driver, 10).until(
                                    EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='number'], input[name*='amount'], .amount-input"))
                                )
                                amount_input.clear()
                                amount_input.send_keys(str(amount))
                                time.sleep(1)
                        
                        # T·ª± ƒë·ªông ƒëi·ªÅn m√£ PIN t·ª´ config
                        print(f"   üîÑ Ti·∫øn tr√¨nh: {cbil} - B∆∞·ªõc 3/4: ƒêi·ªÅn m√£ PIN")
                        try:
                            print(f"   üîê ƒêi·ªÅn m√£ PIN: {Config.DEFAULT_PIN}")
                            pin_input = WebDriverWait(driver, 10).until(
                                EC.presence_of_element_located((By.ID, "payMoneyForm:pin"))
                            )
                            pin_input.clear()
                            pin_input.send_keys(Config.DEFAULT_PIN)
                            time.sleep(1)
                        except:
                            # N·∫øu kh√¥ng t√¨m th·∫•y input PIN theo ID, th·ª≠ t√¨m element kh√°c
                            try:
                                pin_input = WebDriverWait(driver, 10).until(
                                    EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='password'], input[name*='pin'], .pin-input, input[placeholder*='PIN'], input[placeholder*='pin']"))
                                )
                                pin_input.clear()
                                pin_input.send_keys(Config.DEFAULT_PIN)
                                time.sleep(1)
                                print(f"   üîê ƒêi·ªÅn m√£ PIN th√†nh c√¥ng (fallback): {Config.DEFAULT_PIN}")
                            except Exception as pin_error:
                                print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m th·∫•y input PIN: {pin_error}")
                        
                        print(f"   üîÑ Ti·∫øn tr√¨nh: {cbil} - B∆∞·ªõc 4/4: X·ª≠ l√Ω giao d·ªãch")
                        print(f"   üîç Nh·∫•n n√∫t TI·∫æP T·ª§C...")
                        continue_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "payMoneyForm:btnContinue")))
                        continue_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        # Ki·ªÉm tra th√¥ng b√°o l·ªói
                        error_text = get_error_alert_text()
                        if error_text:
                            print(f"   ‚ùå C√≥ th√¥ng b√°o l·ªói: {error_text}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": error_text})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                # L∆∞u th√¥ng tin lo·∫°i d·ªãch v·ª• v√†o notes
                                if is_prepaid:
                                    notes = f"Multi-network: N·∫°p tr·∫£ tr∆∞·ªõc - {cbil} | L·ªói: {error_text}"
                                else:
                                    notes = f"Multi-network: G·∫°ch n·ª£ tr·∫£ sau - {cbil} | L·ªói: {error_text}"
                                
                                db_success = update_database_immediately(order_id, process_code, "failed", None, notes, None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {process_code}")
                            break
                        
                        # L·∫•y th√¥ng tin k·∫øt qu·∫£ t·ª´ trang
                        print(f"   üìä L·∫•y th√¥ng tin k·∫øt qu·∫£...")
                        try:
                            # T√¨m element ch·ª©a th√¥ng tin k·∫øt qu·∫£
                            result_element = WebDriverWait(driver, 10).until(
                                EC.presence_of_element_located((By.CSS_SELECTOR, ".result-info, .payment-result, .success-message, [class*='result'], [class*='success']"))
                            )
                            result_text = result_element.text.strip()
                            print(f"   üìã K·∫øt qu·∫£: {result_text}")
                            
                            # Ph√¢n t√≠ch k·∫øt qu·∫£ ƒë·ªÉ t·∫°o notes chi ti·∫øt
                            if "th√†nh c√¥ng" in result_text.lower() or "success" in result_text.lower():
                                result_status = "success"
                                if is_prepaid:
                                    notes = f"Multi-network: N·∫°p tr·∫£ tr∆∞·ªõc - {cbil} | S·ªë ti·ªÅn: {amount:,}ƒë | K·∫øt qu·∫£: {result_text}"
                                else:
                                    notes = f"Multi-network: G·∫°ch n·ª£ tr·∫£ sau - {cbil} | K·∫øt qu·∫£: {result_text}"
                            else:
                                result_status = "failed"
                                if is_prepaid:
                                    notes = f"Multi-network: N·∫°p tr·∫£ tr∆∞·ªõc - {cbil} | S·ªë ti·ªÅn: {amount:,}ƒë | K·∫øt qu·∫£: {result_text}"
                                else:
                                    notes = f"Multi-network: G·∫°ch n·ª£ tr·∫£ sau - {cbil} | K·∫øt qu·∫£: {result_text}"
                                
                        except Exception as result_error:
                            print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin k·∫øt qu·∫£: {result_error}")
                            result_status = "success"
                            if is_prepaid:
                                notes = f"Multi-network: N·∫°p tr·∫£ tr∆∞·ªõc - {cbil} | S·ªë ti·ªÅn: {amount:,}ƒë"
                            else:
                                notes = f"Multi-network: G·∫°ch n·ª£ tr·∫£ sau - {cbil}"
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng cho {'n·∫°p tr·∫£ tr∆∞·ªõc' if is_prepaid else 'g·∫°ch n·ª£ tr·∫£ sau'} {process_code}")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt t∆∞∆°ng t·ª± FTTH
                        if 'result_text' in locals():
                            print(f"   üìã K·∫øt qu·∫£ chi ti·∫øt:")
                            print(f"      ‚Ä¢ M√£: {cbil}")
                            print(f"      ‚Ä¢ Lo·∫°i d·ªãch v·ª•: {'N·∫°p tr·∫£ tr∆∞·ªõc' if is_prepaid else 'G·∫°ch n·ª£ tr·∫£ sau'}")
                            if is_prepaid:
                                print(f"      ‚Ä¢ S·ªë ti·ªÅn: {amount:,}ƒë")
                            print(f"      ‚Ä¢ K·∫øt qu·∫£: {result_text}")
                            print(f"      ‚Ä¢ Tr·∫°ng th√°i: {result_status}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": amount if is_prepaid else None, "status": result_status, "message": result_text if 'result_text' in locals() else "Th√†nh c√¥ng"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            amount_for_db = amount if is_prepaid else None
                            db_success = update_database_immediately(order_id, process_code, result_status, amount_for_db, notes, None)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {process_code}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {process_code}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < 2:  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"Topup ƒëa m·∫°ng code {cbil} th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                # L∆∞u th√¥ng tin lo·∫°i d·ªãch v·ª• v√†o notes
                                if is_prepaid:
                                    notes = f"Multi-network: N·∫°p tr·∫£ tr∆∞·ªõc - {cbil} | L·ªói: {str(e)}"
                                else:
                                    notes = f"Multi-network: G·∫°ch n·ª£ tr·∫£ sau - {cbil} | L·ªói: {str(e)}"
                                
                                db_success = update_database_immediately(order_id, process_code, "failed", None, notes, None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {process_code}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {process_code}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω Topup ƒëa m·∫°ng:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng m√£ t∆∞∆°ng t·ª± FTTH
            print(f"\nüìã [CHI TI·∫æT] K·∫øt qu·∫£ x·ª≠ l√Ω t·ª´ng m√£:")
            for result in results:
                status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
                amount_info = f" | S·ªë ti·ªÅn: {result['amount']:,}ƒë" if result.get('amount') else ""
                message_info = f" | {result.get('message', '')}" if result.get('message') else ""
                print(f"   {status_icon} {result['code']}{amount_info}{message_info}")
            
            logger.info(f"Topup multinetwork processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_topup_multinetwork_codes error: {e}")

def process_topup_viettel_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω n·∫°p ti·ªÅn Viettel kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Topup Viettel cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang Topup Viettel...")
            navigate_to_topup_viettel_page()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang Topup Viettel")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(3):  # Retry t·ªëi ƒëa 3 l·∫ßn
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/3 cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_topup_viettel_page()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        root.update() if 'root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i: {cbil}")
                        phone_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:phoneNumber")))
                        phone_input.clear()
                        phone_input.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t TI·∫æP T·ª§C...")
                        continue_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, "payMoneyForm:btnContinue")))
                        continue_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng cho s·ªë ƒëi·ªán tho·∫°i {cbil}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": None, "status": "success"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            db_success = update_database_immediately(order_id, cbil, "success", None, "Topup Viettel ok", None)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < 2:  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"Topup Viettel code {cbil} th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω Topup Viettel:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"Topup Viettel processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_topup_viettel_codes error: {e}")

def process_tv_internet_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω thanh to√°n TV-Internet kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω TV-Internet cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang TV-Internet...")
            navigate_to_tv_internet_page()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang TV-Internet")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(3):  # Retry t·ªëi ƒëa 3 l·∫ßn
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/3 cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_tv_internet_page()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        root.update() if 'root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn m√£ thu√™ bao: {cbil}")
                        customer = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:contractCode")))
                        customer.clear()
                        customer.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t KI·ªÇM TRA...")
                        payment_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:btnPay0")))
                        payment_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   üìä L·∫•y th√¥ng tin k·∫øt qu·∫£...")
                        element41 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:j_idt41")))
                        _is_amount, amount, _pid = amount_by_cbil(cbil, element41, False)
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: Amount = {amount}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": amount, "status": "success"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            db_success = update_database_immediately(order_id, cbil, "success", amount, "TV-Internet payment ok", None)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < 2:  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"TV-Internet code {cbil} th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω TV-Internet:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"TV-Internet processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_tv_internet_codes error: {e}")

def process_postpaid_lookup_codes(codes: List[str], order_id: Optional[str] = None):
    """X·ª≠ l√Ω tra c·ª©u tr·∫£ sau kh√¥ng c·∫ßn GUI, ƒëi·ªÅu khi·ªÉn selenium tr·ª±c ti·∫øp."""
    print(f"üöÄ [AUTOMATION] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Postpaid cho {len(codes)} m√£")
    print(f"   üìã Order ID: {order_id or 'Kh√¥ng c√≥'}")
    
    if not ensure_driver_and_login():
        print("   ‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o driver ho·∫∑c ƒëƒÉng nh·∫≠p")
        return
    
    try:
        with automation_lock:
            print("   üîí ƒê√£ kh√≥a automation, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang Postpaid...")
            navigate_to_postpaid_lookup_page()
            print("   ‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang Postpaid")
            
            results = []
            for idx, cbil in enumerate(codes, 1):
                print(f"\nüì± [M√É {idx}/{len(codes)}] X·ª≠ l√Ω m√£: {cbil}")
                success = False
                for attempt in range(3):  # Retry t·ªëi ƒëa 3 l·∫ßn
                    try:
                        cbil = (cbil or "").strip()
                        if not cbil:
                            print(f"   ‚ö†Ô∏è  M√£ r·ªóng, b·ªè qua")
                            break
                        
                        if attempt > 0:
                            print(f"   üîÑ Retry l·∫ßn {attempt + 1}/3 cho m√£ {cbil}")
                            logger.info(f"Retry l·∫ßn {attempt + 1} cho m√£ {cbil}")
                            driver.refresh()
                            time.sleep(2)
                            navigate_to_postpaid_lookup_page()
                        else:
                            print(f"   üéØ L·∫ßn th·ª≠ ƒë·∫ßu ti√™n cho m√£ {cbil}")
                        
                        root.update() if 'root' in globals() else None
                        time.sleep(0.5)
                        
                        print(f"   üìù ƒêi·ªÅn m√£ thu√™ bao: {cbil}")
                        customer = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:contractCode")))
                        customer.clear()
                        customer.send_keys(cbil)
                        
                        print(f"   üîç Nh·∫•n n√∫t KI·ªÇM TRA...")
                        payment_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:btnPay0")))
                        payment_button.click()
                        time.sleep(1)
                        
                        print(f"   ‚è≥ Ch·ªù modal loading...")
                        WebDriverWait(driver, 16).until(EC.invisibility_of_element_located((By.ID, "payMoneyForm:j_idt6_modal")))
                        
                        print(f"   üìä L·∫•y th√¥ng tin k·∫øt qu·∫£...")
                        element41 = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "payMoneyForm:j_idt41")))
                        _is_amount, amount, _pid = amount_by_cbil(cbil, element41, False)
                        
                        print(f"   ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: Amount = {amount}")
                        
                        # Th√†nh c√¥ng, tho√°t kh·ªèi retry loop
                        success = True
                        results.append({"code": cbil, "amount": amount, "status": "success"})
                        
                        # Update database ngay l·∫≠p t·ª©c cho t·ª´ng ƒë∆°n x·ª≠ l√Ω xong
                        if order_id:
                            print(f"   üíæ B·∫Øt ƒë·∫ßu update database...")
                            db_success = update_database_immediately(order_id, cbil, "success", amount, "Postpaid lookup ok", None)
                            if not db_success:
                                logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                        else:
                            print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                        
                        print(f"   üéâ Ho√†n th√†nh x·ª≠ l√Ω m√£ {cbil}")
                        break
                        
                    except Exception as e:
                        print(f"   ‚ùå L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
                        logger.warning(f"L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i cho {cbil}: {e}")
                        if attempt < 2:  # C√≤n c∆° h·ªôi retry
                            print(f"   ‚è≥ Ch·ªù 1s tr∆∞·ªõc khi retry...")
                            time.sleep(1)  # Delay th√¥ng minh
                            continue
                        else:  # H·∫øt retry
                            print(f"   üí• H·∫øt retry, m√£ {cbil} th·∫•t b·∫°i ho√†n to√†n")
                            logger.error(f"Postpaid code {cbil} th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠: {e}")
                            results.append({"code": cbil, "amount": None, "status": "failed", "message": str(e)})
                            
                            # Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
                            if order_id:
                                print(f"   üíæ Update database cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i...")
                                db_success = update_database_immediately(order_id, cbil, "failed", None, str(e), None)
                                if not db_success:
                                    logger.warning(f"Database update th·∫•t b·∫°i cho {cbil}")
                            else:
                                print(f"‚ö†Ô∏è  [WARNING] Kh√¥ng c√≥ order_id, b·ªè qua database update cho {cbil}")
                
                if not success:
                    print(f"   üí• M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
                    logger.error(f"M√£ {cbil} kh√¥ng th·ªÉ x·ª≠ l√Ω sau 3 l·∫ßn th·ª≠")
            
            print(f"\nüìä [K·∫æT QU·∫¢] T·ªïng k·∫øt x·ª≠ l√Ω Postpaid:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len([r for r in results if r['status'] == 'success'])} m√£")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len([r for r in results if r['status'] == 'failed'])} m√£")
            print(f"   üìã T·ªïng c·ªông: {len(results)} m√£")
            
            logger.info(f"Postpaid processed: {len(results)} items")
    except Exception as e:
        print(f"   üí• L·ªói t·ªïng th·ªÉ: {e}")
        logger.error(f"process_postpaid_lookup_codes error: {e}")
